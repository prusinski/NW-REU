(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    880205,      17910]
NotebookOptionsPosition[    873711,      17793]
NotebookOutlinePosition[    874049,      17808]
CellTagsIndexPosition[    874006,      17805]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Cos", "[", 
      RowBox[{"2", "*", "Pi", "*", "f", "*", "t"}], "]"}], "^", "2"}], "*", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "G"}], "*", 
      RowBox[{"t", "^", "2"}]}], "]"}], "*", 
    RowBox[{"Exp", "[", 
     RowBox[{"I", "*", "w", "*", "t"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.770577148675967*^9, 3.770577225276267*^9}, {
  3.770578453541182*^9, 3.770578458456621*^9}, {3.7705810338746977`*^9, 
  3.770581059155542*^9}, {3.770581506656001*^9, 3.770581525332532*^9}, {
  3.77058824401758*^9, 3.77058824430723*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"2e64a3ad-1581-4122-90f9-bc6b05065da3"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "4"], " ", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", 
    FractionBox[
     SuperscriptBox["w", "2"], "4"]}]], " ", 
  RowBox[{"(", 
   RowBox[{"2", "+", 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "2"}], " ", "\[Pi]", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", "\[Pi]"}], "+", "w"}], ")"}]}]], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"4", " ", "\[Pi]", " ", "w"}]]}], ")"}]}]}], ")"}], " ", 
  SqrtBox["\[Pi]"]}]], "Output",
 CellChangeTimes->{3.770577228378426*^9, 3.770578459576111*^9, 
  3.770581044898025*^9, 3.7705810940613003`*^9, 3.770581599751492*^9, 
  3.77058824741271*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"6380167d-3ce9-4f97-ba24-5db6e4ddd1bf"]
}, Open  ]],

Cell[BoxData["t"], "Input",
 CellChangeTimes->{
  3.7705810944549923`*^9},ExpressionUUID->"9a8a99d3-ecb9-4806-a41a-\
fa8d51404a1b"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{
     False->"\<\"https://reference.wolfram.com/language/ref/Files/\
FourierTransform.en/I_2.png\"\>", True->
     StyleBox["\<\"https://reference.wolfram.com/language/ref/Files/\
FourierTransform.en/I_2.png\"\>", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     BaselinePosition->Baseline,
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Hyperlink",
    ButtonData->{
      URL[
      "https://reference.wolfram.com/language/ref/Files/FourierTransform.en/I_\
2.png"], None},
    ButtonNote->
     "https://reference.wolfram.com/language/ref/Files/FourierTransform.en/I_\
2.png"],
   Annotation[#, 
    "https://reference.wolfram.com/language/ref/Files/FourierTransform.en/I_2.\
png", "Hyperlink"]& ],
  "https://reference.wolfram.com/language/ref/Files/FourierTransform.en/I_2.\
png"]], "Input",ExpressionUUID->"5b5bceaf-0766-41d7-935a-b1bed99af9be"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FourierTransform", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cos", "[", 
     RowBox[{"2", "*", "\[Pi]", "*", "f", "*", "t"}], "]"}], "*", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "G"}], "*", 
      RowBox[{"t", "^", "2"}]}], "]"}]}], ",", "t", ",", "\[Omega]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.77057814935513*^9, 3.7705782202620487`*^9}, 
   3.770579510720833*^9, {3.770579541990027*^9, 3.770579550914558*^9}, {
   3.770588042168294*^9, 3.7705880865613956`*^9}, {3.7705881299326897`*^9, 
   3.770588148845614*^9}, {3.7705882540212393`*^9, 3.770588254536828*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"f83a075f-33f0-4a3b-9b9a-686abd0673fa"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"Cosh", "[", 
      RowBox[{"2", " ", "\[Pi]", " ", "\[Omega]"}], "]"}], "+", 
     RowBox[{"Sinh", "[", 
      RowBox[{"2", " ", "\[Pi]", " ", "\[Omega]"}], "]"}]}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Cosh", "[", 
      RowBox[{
       FractionBox["1", "4"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"]}], 
      "]"}], "-", 
     RowBox[{"Sinh", "[", 
      RowBox[{
       FractionBox["1", "4"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"]}], 
      "]"}]}], ")"}]}], 
  RowBox[{"2", " ", 
   SqrtBox["2"]}]]], "Output",
 CellChangeTimes->{
  3.770578150375957*^9, {3.7705781863245687`*^9, 3.7705782312702208`*^9}, 
   3.77057955132231*^9, {3.770588062225934*^9, 3.770588087071999*^9}, {
   3.770588135826312*^9, 3.7705881494468603`*^9}, 3.7705882551801367`*^9},
 CellLabel->"Out[80]=",ExpressionUUID->"3812dd4f-4c63-4800-9fcd-c8769e1d3f07"]
}, Open  ]],

Cell[CellGroupData[{

Cell["FourierTransform[Sin[2*Pi*f*t]*Exp[-G*t^2],t,w]", "WolframAlphaLong",
 CellChangeTimes->{{3.770578465513153*^9, 3.770578510015025*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"7b0419dc-5dd7-4890-a386-8dc3fc657f95"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "FourierTransform[Sin[2*Pi*f*t]*Exp[-G*t^2],t,w]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "FourierTransform",
      "id" -> "Input", "position" -> "100", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"FourierTransform[Sin[2 f Pi t]/E^(G t^2), t, w]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 SubscriptBox["\[ScriptCapitalF]", "t"], "[", 
                 RowBox[{
                   RowBox[{"sin", "(", 
                    RowBox[{"2", " ", "\[Pi]", " ", "f", " ", "t"}], ")"}], 
                   " ", 
                   RowBox[{"exp", "(", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}], ")"}]}], "]"}], 
               RowBox[{"(", "w", ")"}]}], HoldForm], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {
        "text" -> 
         "\[ScriptCapitalF]_x[f(x)](\[Omega]) is the Fourier transform of \
f(x) with frequency variable \[Omega]"}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/FourierTransform.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{
                  RowBox[{
                    SubscriptBox["\[ScriptCapitalF]", "x"], "[", 
                    RowBox[{"f", "(", "x", ")"}], "]"}], 
                  RowBox[{"(", "\[Omega]", ")"}]}], "\" \"", 
                "\"is the Fourier transform of\"", "\" \"", 
                RowBox[{"f", "(", "x", ")"}], "\" \"", 
                "\"with frequency variable\"", "\" \"", "\[Omega]"}, 
               "RowDefault"], TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "FourierTransform", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FourierTransform[Sin[2 Pi f t] Exp[-(G t^2)], t, w, \
FourierParameters -> {0, 1}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox[
               FractionBox["1", 
                SqrtBox[
                 RowBox[{"2", " ", "\[Pi]"}]]], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False], 
              StyleBox[
               TagBox[
                StyleBox[
                 RowBox[{
                   SubsuperscriptBox["\[Integral]", 
                    RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"2", " ", "\[Pi]", " ", "f", " ", "t"}], ")"}], 
                    " ", 
                    RowBox[{"exp", "(", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}], ")"}]}], HoldForm], ")"}], 
                    " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "w", " ", "t"}]]}], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}], ScriptLevel -> 0, 
                 StripOnInput -> False], HoldForm], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False], 
              StyleBox["\" \[LongEqual] \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False], 
              RowBox[{
                RowBox[{
                  RowBox[{"-", 
                    FractionBox["1", "2"]}], " ", "\[ImaginaryI]", " ", 
                  RowBox[{"(", 
                    RowBox[{
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "f"}], "+", "w"}], ")"}], 
                    "2"], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", " ", "G"}], ")"}]}]}]], 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    SqrtBox["G"]}]], "-", 
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"w", "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", "f"}]}], ")"}], "2"], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", " ", "G"}], ")"}]}]}]], 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    SqrtBox["G"]}]]}], ")"}]}], 
                StyleBox[" for ", FontColor -> GrayLevel[0.5]], 
                RowBox[{
                  RowBox[{"f", "\[Element]", 
                    TagBox["\[DoubleStruckCapitalR]", 
                    Function[{}, Reals]]}], "\[And]", 
                  RowBox[{
                    RowBox[{"Re", "(", "G", ")"}], ">", "0"}]}]}]}, 
             "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "statelist", {
        "count" -> "4", "value" -> 
         "normalization: 1/sqrt(2\[Pi]), oscillatory factor: 1", "delimiters" -> 
         ""}, {
         XMLElement[
         "state", {
          "name" -> "normalization: 1/sqrt(2\[Pi]), oscillatory factor: 1", 
           "input" -> 
           "Result__normalization: 1/sqrt(2\[Pi]) oscillatory factor: 1"}, \
{}], 
         XMLElement[
         "state", {
          "name" -> "normalization: 1, oscillatory factor: -2\[Pi]", "input" -> 
           "Result__normalization: 1 oscillatory factor: -2\[Pi]"}, {}], 
         XMLElement[
         "state", {
          "name" -> "normalization: 1, oscillatory factor: -1", "input" -> 
           "Result__normalization: 1 oscillatory factor: -1"}, {}], 
         XMLElement[
         "state", {
          "name" -> "normalization: 1/(2\[Pi]), oscillatory factor: 1", 
           "input" -> 
           "Result__normalization: 1/(2\[Pi]) oscillatory factor: 1"}, \
{}]}]}], 
     XMLElement["infos", {"count" -> "4"}, {
       XMLElement["info", {"text" -> "Re(z) is the real part of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Re.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Re", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/RealPart.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"Re", "(", "z", ")"}], "\" \"", 
                "\"is the real part of\"", "\" \"", "z"}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement[
       "info", {
        "text" -> "e_1 \[And] e_2 \[And] ... is the logical AND function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/And.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/AND.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{
                  SubscriptBox["e", "1"], "\[And]", 
                  SubscriptBox["e", "2"], "\[And]", "\[Ellipsis]"}], "\" \"", 
                "\"is the logical AND function\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/I.html", "text" -> 
           "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[ImaginaryI]", HoldForm], "\" \"", 
                "\"is the imaginary unit\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]], "\" \"", 
                "\"is the set of real numbers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Trigonometric transform", "scanner" -> 
     "FourierTransform", "id" -> "FourierTrigTransforms", "position" -> "300",
      "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              TagBox[
               RowBox[{
                 RowBox[{
                   SubscriptBox["\[ScriptCapitalF]", "t"], "[", 
                   TagBox[
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"2", " ", "\[Pi]", " ", "f", " ", "t"}], ")"}], 
                    " ", 
                    RowBox[{"exp", "(", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}], ")"}]}], HoldForm], "]"}], 
                 RowBox[{"(", "w", ")"}]}], HoldForm], "\" \[LongEqual] \"", 
              TagBox[
               RowBox[{"\[ImaginaryI]", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    SubsuperscriptBox["\[ScriptCapitalF]", "t", "s"], "[", 
                    TagBox[
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"2", " ", "\[Pi]", " ", "f", " ", "t"}], ")"}], 
                    " ", 
                    RowBox[{"exp", "(", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}], ")"}]}], HoldForm], "]"}], 
                    RowBox[{"(", "w", ")"}]}], ")"}]}], HoldForm]}, 
             "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement[
     "subpod", {"title" -> "Fourier sine transform for the odd part"}, {
       XMLElement[
       "minput", {}, {
        "FourierSinTransform[Sin[2 Pi f t] Exp[-(G t^2)], t, w, \
FourierParameters -> {0, 1}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox[
               SqrtBox[
                FractionBox["2", "\[Pi]"]], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False], 
              StyleBox[
               TagBox[
                StyleBox[
                 RowBox[{
                   SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"2", " ", "\[Pi]", " ", "f", " ", "t"}], ")"}], 
                    " ", 
                    RowBox[{"exp", "(", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}], ")"}]}], HoldForm], ")"}], 
                    " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"w", " ", "t"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}], ScriptLevel -> 0, 
                 StripOnInput -> False], HoldForm], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False], 
              StyleBox["\" \[LongEqual] \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False], 
              RowBox[{
                FractionBox[
                 RowBox[{
                   SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "f"}], "+", "w"}], ")"}], 
                    "2"], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", " ", "G"}], ")"}]}]}]], " ", 
                   RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "\[Pi]", " ", "f", " ", "w"}], ")"}], 
                    "/", "G"}]], "-", 
                    RowBox[{"1"}]}], ")"}]}], 
                 RowBox[{"2", " ", 
                   SqrtBox["2"], " ", 
                   SqrtBox["G"]}]], 
                StyleBox[" for ", FontColor -> GrayLevel[0.5]], 
                RowBox[{
                  RowBox[{"f", "\[Element]", 
                    TagBox["\[DoubleStruckCapitalR]", 
                    Function[{}, Reals]]}], "\[And]", 
                  RowBox[{
                    RowBox[{"Re", "(", "G", ")"}], ">", "0"}]}]}]}, 
             "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "statelist", {
        "count" -> "4", "value" -> 
         "normalization: sqrt(2/\[Pi]), oscillatory factor: 1", "delimiters" -> 
         ""}, {
         XMLElement[
         "state", {
          "name" -> "normalization: sqrt(2/\[Pi]), oscillatory factor: 1", 
           "input" -> 
           "FourierTrigTransforms__normalization: sqrt(2/\[Pi]) oscillatory \
factor: 1"}, {}], 
         XMLElement[
         "state", {
          "name" -> "normalization: 2, oscillatory factor: -2\[Pi]", "input" -> 
           "FourierTrigTransforms__normalization: 2 oscillatory factor: -2\
\[Pi]"}, {}], 
         XMLElement[
         "state", {
          "name" -> "normalization: 2, oscillatory factor: -1", "input" -> 
           "FourierTrigTransforms__normalization: 2 oscillatory factor: -1"}, \
{}], 
         XMLElement[
         "state", {
          "name" -> "normalization: 1/\[Pi], oscillatory factor: 1", "input" -> 
           "FourierTrigTransforms__normalization: 1/\[Pi] oscillatory factor: \
1"}, {}]}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement[
       "info", {
        "text" -> 
         "\[ScriptCapitalF]_x[f(x)](\[Omega]) is the Fourier transform of \
f(x) with frequency variable \[Omega]"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/FourierTransform.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/FourierTransform.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{
                  RowBox[{
                    SubscriptBox["\[ScriptCapitalF]", "x"], "[", 
                    RowBox[{"f", "(", "x", ")"}], "]"}], 
                  RowBox[{"(", "\[Omega]", ")"}]}], "\" \"", 
                "\"is the Fourier transform of\"", "\" \"", 
                RowBox[{"f", "(", "x", ")"}], "\" \"", 
                "\"with frequency variable\"", "\" \"", "\[Omega]"}, 
               "RowDefault"], TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement[
       "info", {
        "text" -> 
         "\[ScriptCapitalF]_x^s[f(x)](\[Omega]) is the Fourier sine transform \
of f(x) with frequency variable \[Omega]"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/FourierSinTransform.\
html", "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/FourierSineTransform.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{
                  RowBox[{
                    SubsuperscriptBox["\[ScriptCapitalF]", "x", "s"], "[", 
                    RowBox[{"f", "(", "x", ")"}], "]"}], 
                  RowBox[{"(", "\[Omega]", ")"}]}], "\" \"", 
                "\"is the Fourier sine transform of\"", "\" \"", 
                RowBox[{"f", "(", "x", ")"}], "\" \"", 
                "\"with frequency variable\"", "\" \"", "\[Omega]"}, 
               "RowDefault"], TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "FourierTransform", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
    "2.336", "parsetiming" -> "1.004", "parsetimedout" -> "false", 
    "recalculate" -> "", "id" -> 
    "MSPa950712f3cgaibi262f1d00004cig1334adei1066", "host" -> 
    "http://www4f.wolframalpha.com", "server" -> "27", "related" -> 
    "http://www4f.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa950812f3cgaibi262f1d00004ad53bh347e7ad18809292914472481620", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2019, 6, 26, 17, 55, 13.022633`7.867273787186063}, "Line" -> 
    10, "SessionID" -> 21138297570623249948}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "FourierTransform[Sin[2*Pi*f*t]*Exp[-G*t^2],t,w]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{736., {256., 262.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.770578513051848*^9},ExpressionUUID->"a5d052c5-7bd0-4705-9db0-\
8d4e8f867dde"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Exp", "[", 
  RowBox[{"x", "-", "y"}], "]"}]], "Input",
 CellChangeTimes->{{3.7705786079917803`*^9, 3.7705786112409487`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"99083206-2db7-44a6-9560-d2b1f375a162"],

Cell[BoxData[
 SuperscriptBox["\[ExponentialE]", 
  RowBox[{"x", "-", "y"}]]], "Output",
 CellChangeTimes->{3.7705786122108173`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"7e584d3b-bbc9-4012-86d8-2062fc4559f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Integrate[Sin[2*Pi*f*t]*Exp[-G*t^2]*Exp[I*w*t], t]", "WolframAlphaLong",
 CellChangeTimes->{3.77057881481201*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"41b0f5cd-3963-4bd4-835a-23512092860f"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Integrate[Sin[2*Pi*f*t]*Exp[-G*t^2]*Exp[I*w*t], t]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"ExpandedForm__Step-by-step solution"}}, 
   Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement[
       "minput", {}, {
        "Integrate[Sin[2 Pi f t] Exp[-(G t^2)] Exp[I w t], t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TagBox[
                RowBox[{"\[Integral]", 
                  RowBox[{
                    RowBox[{
                    RowBox[{"sin", "(", 
                    RowBox[{"2", " ", "\[Pi]", " ", "f", " ", "t"}], ")"}], 
                    " ", 
                    RowBox[{"exp", "(", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}], ")"}], " ", 
                    RowBox[{"exp", "(", 
                    RowBox[{"\[ImaginaryI]", " ", "w", " ", "t"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}], HoldForm], 
               PolynomialForm[#, TraditionalOrder -> False]& ], 
              "\[LongEqual]", 
              StyleBox[
               RowBox[{
                 StyleBox[
                  FractionBox[
                   RowBox[{
                    SqrtBox["\[Pi]"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "f"}], "+", "w"}], ")"}], 
                    "2"], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", " ", "G"}], ")"}]}]}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "\[Pi]", " ", "f", " ", "w"}], ")"}], 
                    "/", "G"}]], " ", 
                    RowBox[{"erfi", "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"2"}], " ", "\[Pi]", " ", "f"}]}], "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "G", " ", "t"}], 
                    "+", "w"}], 
                    RowBox[{"2", " ", 
                    SqrtBox["G"]}]], ")"}]}], "-", 
                    RowBox[{"erfi", "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "f"}], "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "G", " ", "t"}], 
                    "+", "w"}], 
                    RowBox[{"2", " ", 
                    SqrtBox["G"]}]], ")"}]}], ")"}]}], 
                   RowBox[{"4", " ", 
                    SqrtBox["G"]}]], {
                   GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                   LineIndent -> 0}, StripOnInput -> False], "+", 
                 StyleBox[
                 "\"constant\"", {
                  Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                   FontSize -> Inherited, 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False]}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False]}], TraditionalForm]],
           "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement[
       "info", {"text" -> "erfi(x) is the imaginary error function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Erfi.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Erfi", "text" -> 
           "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Erfi.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"erfi", "(", "x", ")"}], "\" \"", 
                "\"is the imaginary error function\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/I.html", "text" -> 
           "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[ImaginaryI]", HoldForm], "\" \"", 
                "\"is the imaginary unit\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Alternate form of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateForm", "position" -> "200", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{"-", 
                  FractionBox[
                   RowBox[{
                    SqrtBox["\[Pi]"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "f"}], "+", "w"}], ")"}], 
                    "2"], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", " ", "G"}], ")"}]}]}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "\[Pi]", " ", "f", " ", "w"}], ")"}], 
                    "/", "G"}]], " ", 
                    RowBox[{"erfi", "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "f"}], "-", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "G", " ", "t"}], 
                    "-", "w"}], 
                    RowBox[{"2", " ", 
                    SqrtBox["G"]}]], ")"}]}], "+", 
                    RowBox[{"erfi", "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "f"}], "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "G", " ", "t"}], 
                    "+", "w"}], 
                    RowBox[{"2", " ", 
                    SqrtBox["G"]}]], ")"}]}], ")"}]}], 
                   RowBox[{"4", " ", 
                    SqrtBox["G"]}]]}], {
                 GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], "+", 
               StyleBox[
               "\"constant\"", {
                Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                 FontSize -> Inherited, 
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                 0}, StripOnInput -> False]}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}, StripOnInput -> False], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Expanded form of the integrals", "scanner" -> 
     "Integral", "id" -> "ExpandedForm", "position" -> "100", "error" -> 
     "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{
                  FractionBox[
                   RowBox[{
                    SqrtBox["\[Pi]"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "\[Pi]", " ", "f", " ", "w"}], ")"}], 
                    "/", "G"}], "-", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "f"}], "+", "w"}], ")"}], 
                    "2"], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", " ", "G"}], ")"}]}]}]], " ", 
                    RowBox[{"erfi", "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"2"}], " ", "\[Pi]", " ", "f"}]}], "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "G", " ", "t"}], 
                    "+", "w"}], 
                    RowBox[{"2", " ", 
                    SqrtBox["G"]}]], ")"}]}], 
                   RowBox[{"4", " ", 
                    SqrtBox["G"]}]], "-", 
                  FractionBox[
                   RowBox[{
                    SqrtBox["\[Pi]"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "f"}], "+", "w"}], ")"}], 
                    "2"], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", " ", "G"}], ")"}]}]}]], " ", 
                    RowBox[{"erfi", "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "f"}], "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "G", " ", "t"}], 
                    "+", "w"}], 
                    RowBox[{"2", " ", 
                    SqrtBox["G"]}]], ")"}]}], 
                   RowBox[{"4", " ", 
                    SqrtBox["G"]}]]}], {
                 GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], "+", 
               StyleBox[
               "\"constant\"", {
                Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                 FontSize -> Inherited, 
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                 0}, StripOnInput -> False]}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}, StripOnInput -> False], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Expand the following\""}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    FractionBox[
                    RowBox[{
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    FractionBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox[
                    RowBox[{"-", "2"}], HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm]}], "+", 
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[ImaginaryI]", HoldForm], " ", 
                    TagBox["G", HoldForm], " ", 
                    TagBox["t", HoldForm]}], "+", 
                    TagBox["w", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm], 
                    TagBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox[
                    SqrtBox["G"], HoldForm]}], HoldForm]], ")"}], HoldForm]}],
                     "-", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    FractionBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm]}], "+", 
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[ImaginaryI]", HoldForm], " ", 
                    TagBox["G", HoldForm], " ", 
                    TagBox["t", HoldForm]}], "+", 
                    TagBox["w", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm], 
                    TagBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox[
                    SqrtBox["G"], HoldForm]}], HoldForm]], ")"}], HoldForm]}],
                     HoldForm], TraditionalForm], DisplayForm], ")"}]}]}], 
                    RowBox[{
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FractionBox[
                    TagBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm]}], "+", 
                    TagBox["w", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm], ")"}], 
                    TagBox["2", HoldForm]], HoldForm], 
                    TagBox[
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}], HoldForm]], HoldForm]], " ", 
                    TagBox[
                    SqrtBox["G"], HoldForm]}]}]]}, "RowDefault"], HoldForm]}},
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox[
                    RowBox[{"-", "2"}], HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm]}], "+", 
                    RowBox[{
                    TagBox[
                    RowBox[{"2", " ", "\[ImaginaryI]"}], HoldForm], " ", 
                    TagBox["G", HoldForm], " ", 
                    TagBox["t", HoldForm]}], "+", 
                    TagBox["w", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}]}], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    TagBox[
                    RowBox[{"-", "2"}], HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm]}], ")"}]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], "+", 
                    FractionBox[
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], 
                    StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
                    RowBox[{
                    TagBox[
                    RowBox[{"2", " ", "\[ImaginaryI]"}], HoldForm], " ", 
                    TagBox["G", HoldForm], " ", 
                    TagBox["t", HoldForm]}]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], "+", 
                    FractionBox[
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox["w", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    FrameBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"-", "2"}], HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox["f", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], "+", 
                    FractionBox[
                    RowBox[{
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[ImaginaryI]", HoldForm]}], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox["G", HoldForm], " ", 
                    TagBox["t", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], "+", 
                    FractionBox[
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox["w", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False], ")"}], 
                    HoldForm]}], "-", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    FractionBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm]}], "+", 
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[ImaginaryI]", HoldForm], " ", 
                    TagBox["G", HoldForm], " ", 
                    TagBox["t", HoldForm]}], "+", 
                    TagBox["w", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], 
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox[
                    SqrtBox["G"], HoldForm]}]], ")"}], HoldForm]}], HoldForm],
                     TraditionalForm], DisplayForm], ")"}]}]}], 
                    RowBox[{
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FractionBox[
                    TagBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm]}], "+", 
                    TagBox["w", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], 
                    TagBox["2", HoldForm]], HoldForm], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]], HoldForm]], " ", 
                    TagBox[
                    SqrtBox["G"], HoldForm]}]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], 
                    StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[ImaginaryI]", HoldForm], " ", 
                    TagBox["G", HoldForm], " ", 
                    TagBox["t", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], "\[LongEqual]", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["G", HoldForm], 
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"1", "/", "2"}]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm]], 
                    StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[ImaginaryI]", HoldForm], " ", 
                    TagBox["t", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"-", "2"}], HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox["f", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], "+", 
                    TagBox[
                    FrameBox[
                    TagBox[
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[ImaginaryI]", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["G", HoldForm], 
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"1", "/", "2"}]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm]], " ", 
                    TagBox["t", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], HoldForm], FrameStyle -> 
                    GrayLevel[0.8], FrameMargins -> 1, BaselinePosition -> 
                    Baseline, ContentPadding -> False, StripOnInput -> False],
                     HoldForm], "+", 
                    FractionBox[
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox["w", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], HoldForm]}], "-", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    FractionBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm]}], "+", 
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[ImaginaryI]", HoldForm], " ", 
                    TagBox["G", HoldForm], " ", 
                    TagBox["t", HoldForm]}], "+", 
                    TagBox["w", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], 
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox[
                    SqrtBox["G"], HoldForm]}]], ")"}], HoldForm]}], HoldForm],
                     TraditionalForm], DisplayForm], ")"}]}]}], 
                    RowBox[{
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FractionBox[
                    TagBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm]}], "+", 
                    TagBox["w", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], 
                    TagBox["2", HoldForm]], HoldForm], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]], HoldForm]], " ", 
                    TagBox[
                    SqrtBox["G"], HoldForm]}]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    FractionBox["1", "2"]}], HoldForm], TraditionalForm], 
                    DisplayForm], "\[LongEqual]", 
                    FractionBox["1", "2"]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"-", "2"}], HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox["f", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], "+", 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[ImaginaryI]", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["G", HoldForm], 
                    TagBox[
                    FrameBox[
                    RowBox[{"1", "/", "2"}], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False], 
                    HoldForm]], " ", 
                    TagBox["t", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], "+", 
                    FractionBox[
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox["w", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], HoldForm]}], "-", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    FractionBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm]}], "+", 
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[ImaginaryI]", HoldForm], " ", 
                    TagBox["G", HoldForm], " ", 
                    TagBox["t", HoldForm]}], "+", 
                    TagBox["w", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], 
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox[
                    SqrtBox["G"], HoldForm]}]], ")"}], HoldForm]}], HoldForm],
                     TraditionalForm], DisplayForm], ")"}]}]}], 
                    RowBox[{
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FractionBox[
                    TagBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm]}], "+", 
                    TagBox["w", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], 
                    TagBox["2", HoldForm]], HoldForm], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]], HoldForm]], " ", 
                    TagBox[
                    SqrtBox["G"], HoldForm]}]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm]}], "+", 
                    RowBox[{
                    TagBox[
                    RowBox[{"2", " ", "\[ImaginaryI]"}], HoldForm], " ", 
                    TagBox["G", HoldForm], " ", 
                    TagBox["t", HoldForm]}], "+", 
                    TagBox["w", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}]}], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], 
                    StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm]}]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], "+", 
                    FractionBox[
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], 
                    StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
                    RowBox[{
                    TagBox[
                    RowBox[{"2", " ", "\[ImaginaryI]"}], HoldForm], " ", 
                    TagBox["G", HoldForm], " ", 
                    TagBox["t", HoldForm]}]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], "+", 
                    FractionBox[
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox["w", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["2", "2"], " ", "\[Pi]", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "f"}], "+", 
                    RowBox[{
                    FractionBox["2", "2"], " ", "\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], "-", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    FrameBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox["f", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], "+", 
                    FractionBox[
                    RowBox[{
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[ImaginaryI]", HoldForm]}], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox["G", HoldForm], " ", 
                    TagBox["t", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], "+", 
                    FractionBox[
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox["w", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False], ")"}], 
                    HoldForm]}], HoldForm], TraditionalForm], DisplayForm], 
                    ")"}]}]}], 
                    RowBox[{
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FractionBox[
                    TagBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm]}], "+", 
                    TagBox["w", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], 
                    TagBox["2", HoldForm]], HoldForm], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]], HoldForm]], " ", 
                    TagBox[
                    SqrtBox["G"], HoldForm]}]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], 
                    StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[ImaginaryI]", HoldForm], " ", 
                    TagBox["G", HoldForm], " ", 
                    TagBox["t", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], "\[LongEqual]", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["G", HoldForm], 
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"1", "/", "2"}]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm]], 
                    StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[ImaginaryI]", HoldForm], " ", 
                    TagBox["t", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["2", "2"], " ", "\[Pi]", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "f"}], "+", 
                    RowBox[{
                    FractionBox["2", "2"], " ", "\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], "-", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox["f", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], "+", 
                    TagBox[
                    FrameBox[
                    TagBox[
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[ImaginaryI]", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["G", HoldForm], 
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"1", "/", "2"}]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm]], " ", 
                    TagBox["t", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], HoldForm], FrameStyle -> 
                    GrayLevel[0.8], FrameMargins -> 1, BaselinePosition -> 
                    Baseline, ContentPadding -> False, StripOnInput -> False],
                     HoldForm], "+", 
                    FractionBox[
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox["w", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], HoldForm]}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]}], 
                    RowBox[{
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FractionBox[
                    TagBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm]}], "+", 
                    TagBox["w", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], 
                    TagBox["2", HoldForm]], HoldForm], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]], HoldForm]], " ", 
                    TagBox[
                    SqrtBox["G"], HoldForm]}]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    FractionBox["1", "2"]}], HoldForm], TraditionalForm], 
                    DisplayForm], "\[LongEqual]", 
                    FractionBox["1", "2"]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["2", "2"], " ", "\[Pi]", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "f"}], "+", 
                    RowBox[{
                    FractionBox["2", "2"], " ", "\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], "-", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox["f", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], "+", 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[ImaginaryI]", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["G", HoldForm], 
                    TagBox[
                    FrameBox[
                    RowBox[{"1", "/", "2"}], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False], 
                    HoldForm]], " ", 
                    TagBox["t", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]], "+", 
                    FractionBox[
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox["w", HoldForm]}], 
                    RowBox[{
                    TagBox["2", HoldForm]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], HoldForm]}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]}], 
                    RowBox[{
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FractionBox[
                    TagBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm]}], "+", 
                    TagBox["w", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], 
                    TagBox["2", HoldForm]], HoldForm], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]], HoldForm]], " ", 
                    TagBox[
                    SqrtBox["G"], HoldForm]}]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm]}], "+", 
                    TagBox["w", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm]}], "+", 
                    TagBox["w", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}]}], "\[LongEqual]", 
                    
                    TemplateBox[{
                    "\[ThinSpace]+\[ThinSpace]", 
                    "\"\[ThinSpace]+\[ThinSpace]\"", 
                    TagBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "f", " ", "\[Pi]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "f", " ", "\[Pi]"}], ")"}]}], HoldForm], 
                    TagBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "f", " ", "\[Pi]"}], ")"}], " ", 
                    RowBox[{"(", "w", ")"}]}], HoldForm], 
                    TagBox[
                    RowBox[{
                    RowBox[{"(", "w", ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "f", " ", "\[Pi]"}], ")"}]}], HoldForm], 
                    TagBox[
                    RowBox[{
                    RowBox[{"(", "w", ")"}], " ", 
                    RowBox[{"(", "w", ")"}]}], HoldForm]}, 
                    "RowWithSeparators"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]]}], "+", 
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], "+", 
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], "+", 
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], HoldForm], TraditionalForm], 
                    DisplayForm], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]]}], "+", 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], "+", 
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], HoldForm], TraditionalForm], 
                    DisplayForm]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["2", "2"], " ", "\[Pi]", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "f"}], "+", 
                    RowBox[{
                    FractionBox["2", "2"], " ", "\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], "-", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FractionBox["2", "2"], " ", "\[Pi]", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "f"}], "+", 
                    RowBox[{
                    FractionBox["2", "2"], " ", "\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}]}]}], 
                    RowBox[{
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FractionBox[
                    TagBox[
                    FrameBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]]}], "+", 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], "+", 
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False], 
                    HoldForm], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]], HoldForm]], " ", 
                    TagBox[
                    SqrtBox["G"], HoldForm]}]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    FractionBox[
                    FractionBox["1", "4"], "G"], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]]}], "+", 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], "+", 
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}]}], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    FractionBox[
                    RowBox[{"4", " ", 
                    SuperscriptBox["f", "2"], " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "G"], "4"], "+", 
                    FractionBox[
                    FractionBox[
                    RowBox[{"4", " ", "f", " ", "\[Pi]", " ", "w"}], "G"], 
                    "4"], "+", 
                    FractionBox[
                    FractionBox[
                    SuperscriptBox["w", "2"], "G"], "4"]}], HoldForm], 
                    TraditionalForm], DisplayForm]}]}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["2", "2"], " ", "\[Pi]", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "f"}], "+", 
                    RowBox[{
                    FractionBox["2", "2"], " ", "\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], "-", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    FractionBox["2", "2"], " ", "\[Pi]", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "f"}], "+", 
                    RowBox[{
                    FractionBox["2", "2"], " ", "\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}]}]}], 
                    RowBox[{
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FrameBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]], "+", 
                    FractionBox[
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False], 
                    HoldForm]], " ", 
                    TagBox[
                    SqrtBox["G"], HoldForm]}]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "\[Pi]"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], ")"}]}], "-", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "\[Pi]"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}]}], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "\[Pi]"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], ")"}]}], "+", 
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "\[Pi]"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], ")"}]}]}], HoldForm], 
                    TraditionalForm], DisplayForm]}]}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    RowBox[{
                    TagBox[
                    FrameBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"\[Pi]", " ", "f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]]}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], ")"}]}], "-", 
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"\[Pi]", " ", "f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]]}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False], 
                    HoldForm]}], 
                    RowBox[{
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]], "+", 
                    FractionBox[
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]], "+", 
                    FractionBox[
                    FractionBox[
                    SuperscriptBox["w", "2"], "G"], "4"]}], HoldForm], 
                    TraditionalForm], DisplayForm]], " ", 
                    TagBox[
                    SqrtBox["G"], HoldForm]}]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    TagBox["G", HoldForm]]}], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]], "-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]]}]}], HoldForm], TraditionalForm],
                     DisplayForm]], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]], " ", 
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "\[Pi]"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], ")"}]}], "-", 
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "\[Pi]"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}]}], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    TagBox["G", HoldForm]]}], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]], "-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]]}]}], HoldForm], TraditionalForm],
                     DisplayForm]], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]], " ", 
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "\[Pi]"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], ")"}]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    TagBox["G", HoldForm]]}], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]], "-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]]}]}], HoldForm], TraditionalForm],
                     DisplayForm]], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "\[Pi]"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], ")"}]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    TagBox["G", HoldForm]]}], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]], "-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]]}]}], HoldForm], TraditionalForm],
                     DisplayForm]], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"\[Pi]", " ", "f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]]}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]]}], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    TagBox["G", HoldForm]]}], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]], "-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]]}]}], HoldForm], TraditionalForm],
                     DisplayForm]], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"\[Pi]", " ", "f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]]}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    TagBox["G", HoldForm]]}], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]], "-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]]}]}], HoldForm], TraditionalForm],
                     DisplayForm]], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]]}], ")"}], " ", 
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "\[Pi]"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]], "\[LongEqual]", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    TagBox["G", HoldForm]]}], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]], "-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]]}], "+", 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm]], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm]}], ")"}], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "\[Pi]"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    FrameBox[
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    TagBox["G", HoldForm]]}], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]], "-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]]}], "+", 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm]], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"\[Pi]", " ", "f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]]}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]]}], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False], 
                    HoldForm], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    TagBox["G", HoldForm]]}], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]], "-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]]}]}], HoldForm], TraditionalForm],
                     DisplayForm]], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"\[Pi]", " ", "f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]]}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Grouping \"", "\"like \"", "\"terms, \"", 
                    RowBox[{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    TagBox["G", HoldForm]]}], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]], "-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]]}], "+", 
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]}], HoldForm], TraditionalForm], 
                    DisplayForm], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]]}], "+", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], "-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    TagBox["G", HoldForm]]}], HoldForm], TraditionalForm], 
                    DisplayForm]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]]}], "+", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], "-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    TagBox["G", HoldForm]]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm]], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"\[Pi]", " ", "f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]]}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]]}], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    TagBox["G", HoldForm]]}], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]], "-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]]}]}], HoldForm], TraditionalForm],
                     DisplayForm]], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"\[Pi]", " ", "f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]]}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{", ", "\", \"", 
                    RowBox[{
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"f", " ", "\[Pi]", " ", "w", " ", "2"}], "G"], 
                    "+", 
                    FractionBox[
                    RowBox[{"f", " ", "\[Pi]", " ", "w", " ", 
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}]}], "G"]}], HoldForm], 
                    "\[LongEqual]", 
                    FractionBox[
                    RowBox[{
                    TagBox["f", HoldForm], " ", 
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]]}]}, "RowWithSeparators"]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]]}], "+", 
                    TagBox[
                    FrameBox[
                    FractionBox[
                    RowBox[{
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False], 
                    HoldForm], "-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    TagBox["G", HoldForm]]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm]], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"\[Pi]", " ", "f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]]}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]]}], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    SqrtBox["\[Pi]"], HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[Pi]", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    SuperscriptBox[
                    TagBox["f", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    TagBox["G", HoldForm]]}], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox["\[Pi]", HoldForm], " ", 
                    TagBox["f", HoldForm], " ", 
                    TagBox["w", HoldForm]}], 
                    TagBox["G", HoldForm]], "-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["w", HoldForm], 
                    TagBox["2", HoldForm]]}], 
                    RowBox[{
                    TagBox["4", HoldForm], " ", 
                    TagBox["G", HoldForm]}]]}]}], HoldForm], TraditionalForm],
                     DisplayForm]], " ", 
                    FractionBox["1", 
                    SqrtBox[
                    TagBox[
                    TagBox["G", HoldForm], HoldForm]]], " ", 
                    TagBox[
                    RowBox[{"erfi", "(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"\[Pi]", " ", "f", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]]}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["G"], " ", "t"}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox["G", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "w"}]}], HoldForm], 
                    ")"}], HoldForm]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], 
                    FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}], 
       XMLElement["infos", {"count" -> "2"}, {
         XMLElement[
         "info", {"text" -> "erfi(x) is the imaginary error function"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/Erfi.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/GammaBetaErf/Erfi", "text" -> 
             "Properties", "title" -> "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/Erfi.html", "text" -> 
             "Definition", "title" -> "MathWorld"}, {}], 
           XMLElement["cell", {"compressed" -> False, "string" -> True}, {
             Cell[
              BoxData[
               FormBox[
                TemplateBox[{
                  RowBox[{"erfi", "(", "x", ")"}], "\" \"", 
                  "\"is the imaginary error function\""}, "RowDefault"], 
                TraditionalForm]], "Output", {
              Background -> None, 
               GraphicsBoxOptions -> {
                DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                 DefaultAxesStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"], DefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
               Graphics3DBoxOptions -> {
                DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
              NumberPoint -> ".", 
              AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
              RenderingOptions -> {
               "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
         XMLElement["info", {"text" -> "i is the imaginary unit"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/I.html", 
             "text" -> "Documentation", "title" -> "Documentation"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
             "Definition", "title" -> "MathWorld"}, {}], 
           XMLElement["cell", {"compressed" -> False, "string" -> True}, {
             Cell[
              BoxData[
               FormBox[
                TemplateBox[{
                  TagBox["\[ImaginaryI]", HoldForm], "\" \"", 
                  "\"is the imaginary unit\""}, "RowDefault"], 
                TraditionalForm]], "Output", {
              Background -> None, 
               GraphicsBoxOptions -> {
                DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                 DefaultAxesStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"], DefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
               Graphics3DBoxOptions -> {
                DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
              NumberPoint -> ".", 
              AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
              RenderingOptions -> {
               "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "ExpandedForm__Hide steps"}, {}]}]}], Typeset`pod4$$, Typeset`pod5$$,
    Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, Typeset`pod9$$, 
   Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, 
   Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, 
   Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, 
   Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, 
   Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, 
   Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
     "", "timedout" -> 
     "Integral,Series,Plot,Plotter,Simplification,Sequence,Sum", 
     "timedoutpods" -> "", "timing" -> "4.261", "parsetiming" -> "0.839", 
     "parsetimedout" -> "false", "recalculate" -> 
     "http://www4d.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa20921hcc43648ba202ae0000650i18fe9ihh86e69125691056209368087", "id" -> 
     "MSPa20931hcc43648ba202ae000041i52d885c8a7a2d", "host" -> 
     "http://www4d.wolframalpha.com", "server" -> "35", "related" -> 
     "http://www4d.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa20941hcc43648ba202ae00005152ddb8c5dh8h3g9125691056209368087", "version" -> 
     "2.6"}, {"success" -> "true", "error" -> "false", "numpods" -> "0", 
     "datatypes" -> "", "timedout" -> 
     "Integral,Series,Plot,Plotter,Simplification,Sequence,Sum", 
     "timedoutpods" -> "", "timing" -> "5.062", "parsetiming" -> "0.", 
     "parsetimedout" -> "false", "recalculate" -> "", "id" -> "", "host" -> 
     "http://www4d.wolframalpha.com", "server" -> "29", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2019, 6, 26, 18, 0, 20.665835`8.067827941281303}, "Line" -> 12,
     "SessionID" -> 21138297570623249948}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "Integrate[Sin[2*Pi*f*t]*Exp[-G*t^2]*Exp[I*w*t], t]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{736., {1736., 1742.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$}, Typeset`chosen$$, Typeset`open$$, 
         Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www4d.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa20921hcc43648ba202ae0000650i18fe9ihh86e69125691056209368087", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.7705788207236834`*^9},ExpressionUUID->"8cbb173b-3547-47ed-8008-\
05e90aa64cf9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{
     RowBox[{"2", "*", "I", "*", "w", "*", "t"}], "-", 
     RowBox[{"G", "*", 
      RowBox[{"t", "^", "2"}]}]}], "]"}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.77057913505249*^9, 3.770579161887471*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"498076c4-dd8b-4206-8b6b-d503ce907234"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     FractionBox[
      SuperscriptBox["w", "2"], "G"]}]], " ", 
   SqrtBox["\[Pi]"], " ", 
   RowBox[{"Erf", "[", 
    FractionBox[
     RowBox[{
      RowBox[{"G", " ", "t"}], "-", 
      RowBox[{"\[ImaginaryI]", " ", "w"}]}], 
     SqrtBox["G"]], "]"}]}], 
  RowBox[{"2", " ", 
   SqrtBox["G"]}]]], "Output",
 CellChangeTimes->{{3.7705791512815027`*^9, 3.77057916239106*^9}},
 CellLabel->"Out[14]=",ExpressionUUID->"4d5d8511-f687-43fe-bb5c-fc04c67e1e94"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Integrate[Exp[-2*I*w*t-G*t^2],t]", "WolframAlphaLong",
 CellChangeTimes->{{3.770579174122685*^9, 3.770579174543545*^9}, 
   3.7705793634361486`*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"49f0d9ab-e45d-4339-b32b-3d0d3bce3245"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Integrate[Exp[-2*I*w*t-G*t^2],t]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["minput", {}, {"Integrate[Exp[-2 I w t - G t^2], t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TagBox[
                RowBox[{"\[Integral]", 
                  RowBox[{
                    RowBox[{"exp", "(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "2"}], " ", "\[ImaginaryI]", " ", "w", " ", 
                    "t"}], "-", 
                    RowBox[{"G", " ", 
                    SuperscriptBox["t", "2"]}]}], ")"}], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}], HoldForm], 
               PolynomialForm[#, TraditionalOrder -> False]& ], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   FractionBox[
                    RowBox[{
                    SqrtBox["\[Pi]"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    RowBox[{
                    SuperscriptBox["w", "2"], "/", "G"}]}]], " ", 
                    RowBox[{"erf", "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"G", " ", "t"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "w"}]}], 
                    SqrtBox["G"]], ")"}]}], 
                    RowBox[{"2", " ", 
                    SqrtBox["G"]}]], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "erf(x) is the error function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Erf.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Erf", "text" -> 
           "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Erf.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"erf", "(", "x", ")"}], "\" \"", 
                "\"is the error function\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/I.html", "text" -> 
           "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[ImaginaryI]", HoldForm], "\" \"", 
                "\"is the imaginary unit\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at w = 0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAt `1`x=0.", "position" -> 
     "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(Sqrt[Pi] Erf[(G t + I w)/Sqrt[G]])/(2 E^(w^2/G) Sqrt[G]), \
{w, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox[
                    RowBox[{
                    SqrtBox["\[Pi]"], " ", 
                    RowBox[{"erf", "(", 
                    RowBox[{
                    SqrtBox["G"], " ", "t"}], ")"}]}], 
                    RowBox[{"2", " ", 
                    SqrtBox["G"]}]], "+", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "w", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}]]}], "G"], "+", 
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"t", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}]]}], "G"], "-", 
                    FractionBox[
                    RowBox[{
                    SqrtBox["\[Pi]"], " ", 
                    RowBox[{"erf", "(", 
                    RowBox[{
                    SqrtBox["G"], " ", "t"}], ")"}]}], 
                    RowBox[{"2", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"3", "/", "2"}]]}]]}], ")"}]}], "-", 
                    FractionBox[
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["w", "3"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"G", " ", 
                    SuperscriptBox["t", "2"]}], "+", "1"}], ")"}]}], 
                    RowBox[{"3", " ", 
                    SuperscriptBox["G", "2"]}]], "+", 
                    RowBox[{
                    SuperscriptBox["w", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SqrtBox["\[Pi]"], " ", 
                    RowBox[{"erf", "(", 
                    RowBox[{
                    SqrtBox["G"], " ", "t"}], ")"}]}], 
                    RowBox[{"4", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"5", "/", "2"}]]}]], "-", 
                    FractionBox[
                    RowBox[{"t", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "G", " ", 
                    SuperscriptBox["t", "2"]}], "+", "3"}], ")"}]}], 
                    RowBox[{"6", " ", 
                    SuperscriptBox["G", "2"]}]]}], ")"}]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["w", "5"], ")"}], 
                    SeriesData[$CellContext`w, 0, {}, 0, 5, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"w", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SqrtBox["\[Pi]"], " ", 
                    RowBox[{"Erf", "[", 
                    RowBox[{
                    SqrtBox["G"], " ", "t"}], "]"}]}], 
                    RowBox[{"2", " ", 
                    SqrtBox["G"]}]], ",", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}]]}], "G"], ",", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}]], " ", "t"}], "G"], "-", 
                    FractionBox[
                    RowBox[{
                    SqrtBox["\[Pi]"], " ", 
                    RowBox[{"Erf", "[", 
                    RowBox[{
                    SqrtBox["G"], " ", "t"}], "]"}]}], 
                    RowBox[{"2", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"3", "/", "2"}]]}]]}], ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}]], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"G", " ", 
                    SuperscriptBox["t", "2"]}]}], ")"}]}], 
                    RowBox[{"3", " ", 
                    SuperscriptBox["G", "2"]}]]}], ",", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}]], " ", "t", " ", 
                    RowBox[{"(", 
                    RowBox[{"3", "+", 
                    RowBox[{"2", " ", "G", " ", 
                    SuperscriptBox["t", "2"]}]}], ")"}]}], 
                    RowBox[{"6", " ", 
                    SuperscriptBox["G", "2"]}]]}], "+", 
                    FractionBox[
                    RowBox[{
                    SqrtBox["\[Pi]"], " ", 
                    RowBox[{"Erf", "[", 
                    RowBox[{
                    SqrtBox["G"], " ", "t"}], "]"}]}], 
                    RowBox[{"4", " ", 
                    SuperscriptBox["G", 
                    RowBox[{"5", "/", "2"}]]}]]}]}], "}"}], ",", "0", ",", 
                    "5", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at w = \[Infinity]", 
     "scanner" -> "Series", "id" -> 
     "SeriesExpansionOfTheIntegralAt `1`x=Infinity", "position" -> "300", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(Sqrt[Pi] Erf[(G t + I w)/Sqrt[G]])/(2 E^(w^2/G) Sqrt[G]), \
{w, Infinity, 4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FractionBox["1", "2"], " ", 
              SuperscriptBox["\[ExponentialE]", 
               RowBox[{
                 RowBox[{"-", 
                   RowBox[{
                    RowBox[{
                    SuperscriptBox["w", "2"], "/", "G"}]}]}], "-", 
                 RowBox[{"2", " ", "\[ImaginaryI]", " ", "t", " ", "w"}]}]], 
              " ", 
              RowBox[{"(", 
                RowBox[{
                  RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    SuperscriptBox["w", "2"], "/", "G"}]], " ", 
                    RowBox[{"(", 
                    TemplateBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}]]}], "w"], "-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}]], " ", "G", " ", "t"}], 
                    SuperscriptBox["w", "2"]], "-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}]], " ", "G", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "G", " ", 
                    SuperscriptBox["t", "2"]}], "-", "1"}], ")"}]}], 
                    RowBox[{"2", " ", 
                    SuperscriptBox["w", "3"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "w"], ")"}], "4"], ")"}], 
                    SeriesData[$CellContext`w, 
                    DirectedInfinity[1], {}, 1, 4, 1], Editable -> False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"w", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}]]}], ",", 
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}]]}], " ", "G", " ", "t"}], ",", 
                    
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}]], " ", "G", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"2", " ", "G", " ", 
                    SuperscriptBox["t", "2"]}]}], ")"}]}]}], "}"}], ",", "1", 
                    ",", "4", ",", "1"}], "]"}]}, "SeriesData", 
                    DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus], 
                    ")"}]}], "-", 
                  RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["\[Pi]"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "t", " ", "w"}]], 
                    " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", 
                    FractionBox["1", "G"]}], ")"}], 
                    RowBox[{
                    RowBox[{"1", "/", "2"}], "+", 
                    RowBox[{
                    RowBox[{"1", "/", "2"}], " ", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"arg", "(", 
                    RowBox[{
                    RowBox[{"G", " ", 
                    SuperscriptBox["t", "2"]}], "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "w", " ", "t"}]}],
                     ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "\[Pi]"}], ")"}]}]}, "Floor"]}]}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "G"}], ")"}], 
                    RowBox[{
                    RowBox[{"1", "/", "2"}], " ", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"arg", "(", 
                    RowBox[{
                    RowBox[{"G", " ", 
                    SuperscriptBox["t", "2"]}], "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "w", " ", "t"}]}],
                     ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "\[Pi]"}], ")"}]}]}, "Floor"]}]]}]}], 
                ")"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement["info", {"text" -> "arg(z) is the complex argument"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Arg.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Arg", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ComplexArgument.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"arg", "(", "z", ")"}], "\" \"", 
                "\"is the complex argument\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement["info", {"text" -> "floor(x) is the floor function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Floor.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/IntegerFunctions/Floor", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/FloorFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TemplateBox[{"x"}, "Floor"], "\" \"", 
                "\"is the floor function\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "3.055", 
    "parsetiming" -> "0.892", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa47371bff5bh2e25g2e800000518idd9i359f0274", "host" -> 
    "http://www4f.wolframalpha.com", "server" -> "55", "related" -> 
    "http://www4f.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa47381bff5bh2e25g2e8000001g2fbg2be93d99a18707379056943765232", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2019, 6, 26, 18, 9, 27.21012`8.18730543887207}, "Line" -> 16, 
    "SessionID" -> 21138297570623249948}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Integrate[Exp[-2*I*w*t-G*t^2],t]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{736., {292., 298.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.770579367229792*^9},ExpressionUUID->"840a6ca5-0dcb-48ef-83c4-\
162834e22bbb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "=", "1"}]], "Input",
 CellChangeTimes->{{3.770581628209731*^9, 3.770581629066214*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"4962fdef-a0af-44b6-a53c-873f66bab105"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.7705816294556427`*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"7d3429ae-a8d9-45f7-82f4-31da50406a01"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "w", "]"}]], "Input",
 CellChangeTimes->{{3.770581630878962*^9, 3.770581631959009*^9}, {
  3.7705816669622097`*^9, 3.770581669832302*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"22280482-4bd8-4909-be79-0f4d879ae924"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{"-", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       FractionBox[
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"4", " ", "f", " ", "\[Pi]"}], "+", "w"}], ")"}], "2"], 
        RowBox[{"4", " ", "G"}]]}]], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       SuperscriptBox["\[ExponentialE]", 
        FractionBox[
         RowBox[{"4", " ", "f", " ", "\[Pi]", " ", "w"}], "G"]], "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["\[ExponentialE]", 
         FractionBox[
          RowBox[{"2", " ", "f", " ", "\[Pi]", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"2", " ", "f", " ", "\[Pi]"}], "+", "w"}], ")"}]}], 
          "G"]]}]}], ")"}], " ", 
     SqrtBox["\[Pi]"]}], 
    RowBox[{"4", " ", 
     SqrtBox["G"]}]]}], "]"}]], "WolframAlphaLong",
 CellChangeTimes->{{3.770581633338874*^9, 3.770581685247369*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"ea038ae6-abd5-41fc-8d5e-8f2f407041b0"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Plot[-((\\[ExponentialE]^(-((4 f \\[Pi] + w)^2/(\n    4 G))) (1 + \
\\[ExponentialE]^((4 f \\[Pi] w)/G) - \n     2 \\[ExponentialE]^((2 f \\[Pi] \
(2 f \\[Pi] + w))/G)) Sqrt[\\[Pi]])/(\n  4 Sqrt[G]))]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["tips", {"count" -> "3"}, {"\n  ", 
      XMLElement["tip", {"text" -> "Try a shorter or simpler query"}, {}], 
      "\n  ", 
      XMLElement[
      "tip", {"text" -> "Avoid concatenation in math expressions"}, {}], 
      "\n  ", 
      XMLElement[
      "tip", {"text" -> 
        "Use r*x rather than rx, and q*x^2 rather than qx2"}, {}], "\n "}]}, 
   Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "false", "error" -> "false", "numpods" -> "0", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "9.151", 
    "parsetiming" -> "5.005", "parsetimedout" -> "true", "recalculate" -> "", 
    "id" -> "", "host" -> "http://www3.wolframalpha.com", "server" -> "53", 
    "related" -> "", "version" -> "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2019, 6, 26, 18, 48, 20.996824`8.074728591601296}, "Line" -> 
    27, "SessionID" -> 21138297570623249948}, Typeset`showpods$$ = {}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "Plot[-((\\[ExponentialE]^(-((4 f \\[Pi] + w)^2/(\n    4 G))) (1 + \
\\[ExponentialE]^((4 f \\[Pi] w)/G) - \n     2 \\[ExponentialE]^((2 f \\[Pi] \
(2 f \\[Pi] + w))/G)) Sqrt[\\[Pi]])/(\n  4 Sqrt[G]))]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {}, {}, Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, 
        Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{736., {40., 46.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.770581701011237*^9},ExpressionUUID->"2d5c5e1d-faac-4b4f-8788-\
1cbc812e00a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FourierTransform", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", 
     RowBox[{"F", "*", "t"}], "]"}], 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "G"}], "*", 
      RowBox[{"t", "^", "2"}]}], "]"}]}], ",", "t", ",", "w"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.770581739596778*^9, 3.770581771803726*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"9ae127b0-6c40-430b-93a9-61ce12ee50e0"],

Cell[BoxData[
 FractionBox[
  RowBox[{"\[ImaginaryI]", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Cosh", "[", 
      FractionBox[
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"F", "-", "w"}], ")"}], "2"], 
       RowBox[{"4", " ", "G"}]], "]"}], "-", 
     RowBox[{"Cosh", "[", 
      FractionBox[
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"F", "+", "w"}], ")"}], "2"], 
       RowBox[{"4", " ", "G"}]], "]"}], "-", 
     RowBox[{"Sinh", "[", 
      FractionBox[
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"F", "-", "w"}], ")"}], "2"], 
       RowBox[{"4", " ", "G"}]], "]"}], "+", 
     RowBox[{"Sinh", "[", 
      FractionBox[
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"F", "+", "w"}], ")"}], "2"], 
       RowBox[{"4", " ", "G"}]], "]"}]}], ")"}]}], 
  RowBox[{"2", " ", 
   SqrtBox["2"], " ", 
   SqrtBox["G"]}]]], "Output",
 CellChangeTimes->{3.770581772615828*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"9c784fd2-b66c-4b14-b170-40eb867038bb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exp[2*i*pi*t*(c-f)]-Exp[-2*i*pi*t*(c+f)]", "WolframAlphaLong",
 CellChangeTimes->{{3.770582670076136*^9, 3.7705827174296417`*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"17182ecb-7359-42b7-b1a3-a243e0840229"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Exp[2*i*pi*t*(c-f)]-Exp[-2*i*pi*t*(c+f)]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Exp[2 I Pi t (c - f)] - Exp[-2 I Pi t (c + f)]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"exp", "(", 
                 
                 RowBox[{
                  "2", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", "t", " ", 
                   RowBox[{"(", 
                    RowBox[{"c", "-", 
                    FormBox["f", TraditionalForm]}], ")"}]}], ")"}], "-", 
               RowBox[{"exp", "(", 
                 RowBox[{
                   RowBox[{"-", "2"}], " ", "\[ImaginaryI]", " ", "\[Pi]", 
                   " ", "t", " ", 
                   RowBox[{"(", 
                    RowBox[{"c", "+", 
                    FormBox["f", TraditionalForm]}], ")"}]}], ")"}]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/I.html", "text" -> 
           "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[ImaginaryI]", HoldForm], "\" \"", 
                "\"is the imaginary unit\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Identity", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SuperscriptBox["\[ExponentialE]", 
               RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", "t", " ", 
                 RowBox[{"(", 
                   RowBox[{"c", "-", 
                    FormBox["f", TraditionalForm]}], ")"}]}]], "-", 
              SuperscriptBox["\[ExponentialE]", 
               RowBox[{
                 RowBox[{"-", "2"}], " ", "\[ImaginaryI]", " ", "\[Pi]", " ", 
                 "t", " ", 
                 RowBox[{"(", 
                   RowBox[{"c", "+", 
                    FormBox["f", TraditionalForm]}], ")"}]}]]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,moutput"}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "I", "template" -> "Assuming ${desc1}. Use ${desc2} instead",
         "count" -> "2"}, {
        XMLElement[
        "value", {
         "name" -> "ImaginaryI", "desc" -> "i is the imaginary unit", "input" -> 
          "i_ImaginaryI"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Variable", "desc" -> "i is a variable", "input" -> 
          "i_Variable"}, {}]}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Math", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.973", 
    "parsetiming" -> "1.613", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa57671fg3b7e4f0ce501i000055c86g7i5hbd2bed", "host" -> 
    "http://www5a.wolframalpha.com", "server" -> "45", "related" -> 
    "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa57681fg3b7e4f0ce501i0000612b807a50i6fa7i514813895611993283", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2019, 6, 26, 19, 5, 19.977052`8.05310638405407}, "Line" -> 30, 
    "SessionID" -> 21138297570623249948}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Exp[2*i*pi*t*(c-f)]-Exp[-2*i*pi*t*(c+f)]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{736., {107., 113.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.770582719986651*^9},ExpressionUUID->"656ee9b4-b483-4f80-a02c-\
d46ab9fd305d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sin(2*pi*c*t)*exp(2*i*pi*f*t)", "WolframAlphaLong",
 CellChangeTimes->{{3.770582749555894*^9, 3.770582790156762*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"24a5d59b-6769-4fa8-a4d0-0360446ea063"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Sin(2*pi*c*t)*exp(2*i*pi*f*t)", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Sin[2 Pi c t] Exp[2 I Pi f t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"sin", "(", 
                 RowBox[{"2", " ", "\[Pi]", " ", "c", " ", "t"}], ")"}], " ", 
               
               RowBox[{"exp", "(", 
                 RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", 
                   FormBox["f", TraditionalForm], " ", "t"}], ")"}]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/I.html", "text" -> 
           "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[ImaginaryI]", HoldForm], "\" \"", 
                "\"is the imaginary unit\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Identity", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SuperscriptBox["\[ExponentialE]", 
               RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", 
                 FormBox["f", TraditionalForm], " ", "t"}]], " ", 
              RowBox[{"sin", "(", 
                RowBox[{"2", " ", "\[Pi]", " ", "c", " ", "t"}], ")"}]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,moutput"}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "I", "template" -> "Assuming ${desc1}. Use ${desc2} instead",
         "count" -> "2"}, {
        XMLElement[
        "value", {
         "name" -> "ImaginaryI", "desc" -> "i is the imaginary unit", "input" -> 
          "i_ImaginaryI"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Variable", "desc" -> "i is a variable", "input" -> 
          "i_Variable"}, {}]}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Math", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.188", 
    "parsetiming" -> "0.893", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa673513bbgi88eccfh7ed000016b9361fg72gheie", "host" -> 
    "http://www5a.wolframalpha.com", "server" -> "46", "related" -> 
    "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa673613bbgi88eccfh7ed00005a51b4f9h10ah8799025245561319513297", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2019, 6, 26, 19, 6, 32.162506`8.259924860669047}, "Line" -> 32,
     "SessionID" -> 21138297570623249948}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Sin(2*pi*c*t)*exp(2*i*pi*f*t)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{736., {107., 113.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.770582792172011*^9},ExpressionUUID->"dbd2a044-fc08-45db-a9d6-\
9001fb24c879"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"TrigToExp", "[", 
  RowBox[{"FourierTransform", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Exp", "[", 
      RowBox[{"-", 
       RowBox[{"t", "^", "2"}]}], "]"}], "*", 
     RowBox[{"Sin", "[", "t", "]"}]}], ",", "t", ",", "\[Omega]"}], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Exp", "[", 
   RowBox[{
    RowBox[{"-", "B"}], "*", 
    RowBox[{"t", "^", "2"}]}], "]"}], "*", 
  RowBox[{"Sin", "[", 
   RowBox[{"A", "*", "t"}], "]"}], "*", 
  RowBox[{"Exp", "[", 
   RowBox[{"I", "*", "\[Omega]", "*", "t"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.770583156593828*^9, 3.770583221039032*^9}, {
  3.770583572291535*^9, 3.770583602043108*^9}, {3.77058391329642*^9, 
  3.770583934095131*^9}, {3.770584019189744*^9, 3.7705840363161287`*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"43635dd3-d756-4f8a-8335-cfb666f9a4fa"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox[
    RowBox[{"\[ImaginaryI]", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "4"]}], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Omega]"}], ")"}], "2"]}]]}], 
    RowBox[{"2", " ", 
     SqrtBox["2"]}]]}], "+", 
  FractionBox[
   RowBox[{"\[ImaginaryI]", " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"\[Omega]", "-", 
      RowBox[{
       FractionBox["1", "4"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Omega]"}], ")"}], "2"]}]}]]}], 
   RowBox[{"2", " ", 
    SqrtBox["2"]}]]}]], "Output",
 CellChangeTimes->{{3.7705839165417852`*^9, 3.770583934632057*^9}, 
   3.770584036711162*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"99a2a520-0275-444b-94a8-341bb8198f87"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "B"}], " ", 
     SuperscriptBox["t", "2"]}], "+", 
    RowBox[{"\[ImaginaryI]", " ", "t", " ", "\[Omega]"}]}]], " ", 
  RowBox[{"Sin", "[", 
   RowBox[{"A", " ", "t"}], "]"}]}]], "Output",
 CellChangeTimes->{{3.7705839165417852`*^9, 3.770583934632057*^9}, 
   3.770584036715365*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"657ae1f5-34c8-4049-881e-7eb4e4c17a16"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "B"}], " ", 
      SuperscriptBox["t", "2"]}], "+", 
     RowBox[{"\[ImaginaryI]", " ", "t", " ", "\[Omega]"}]}]], " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"A", " ", "t"}], "]"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[54]:=",ExpressionUUID->"ecf6fe35-296c-493a-934a-e22bab0e01d3"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"t", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "B"}], " ", "t"}], "+", 
      RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]], " ", 
  RowBox[{"Sin", "[", 
   RowBox[{"A", " ", "t"}], "]"}]}]], "Output",
 CellChangeTimes->{3.770584041635161*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"6033e26b-d364-406e-b312-771c3f236313"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ExpToTrig", "[", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"t", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "B"}], " ", "t"}], "+", 
      RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]], " ", 
  "]"}]], "Input",
 CellChangeTimes->{{3.770584183679028*^9, 3.770584186439301*^9}},
 NumberMarks->False,
 CellLabel->"",ExpressionUUID->"99c2fa32-a89a-41dc-8016-75b6e45cd290"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Cosh", "[", 
      RowBox[{
       RowBox[{"B", " ", 
        SuperscriptBox["t", "2"]}], "-", 
       RowBox[{"\[ImaginaryI]", " ", "t", " ", "\[Omega]"}]}], "]"}], " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"A", " ", "t"}], "]"}]}], "-", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"A", " ", "t"}], "]"}], " ", 
     RowBox[{"Sinh", "[", 
      RowBox[{
       RowBox[{"B", " ", 
        SuperscriptBox["t", "2"]}], "-", 
       RowBox[{"\[ImaginaryI]", " ", "t", " ", "\[Omega]"}]}], "]"}]}]}], ",",
    "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.770584659423806*^9, 3.770584666555459*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"2ae244fd-76ec-4de0-8ae2-8c72fe445f6a"],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox[
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"-", 
      FractionBox[
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"A", "+", "\[Omega]"}], ")"}], "2"], 
       RowBox[{"4", " ", "B"}]]}]], " ", 
    SqrtBox["\[Pi]"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        FractionBox[
         RowBox[{"A", " ", "\[Omega]"}], "B"]], " ", 
       RowBox[{"Erfi", "[", 
        FractionBox[
         RowBox[{"A", "-", 
          RowBox[{"2", " ", "\[ImaginaryI]", " ", "B", " ", "t"}], "-", 
          "\[Omega]"}], 
         RowBox[{"2", " ", 
          SqrtBox["B"]}]], "]"}]}], "+", 
      RowBox[{"Erfi", "[", 
       FractionBox[
        RowBox[{"A", "+", 
         RowBox[{"2", " ", "\[ImaginaryI]", " ", "B", " ", "t"}], "+", 
         "\[Omega]"}], 
        RowBox[{"2", " ", 
         SqrtBox["B"]}]], "]"}]}], ")"}]}], 
   RowBox[{"4", " ", 
    SqrtBox["B"]}]]}]], "Output",
 CellChangeTimes->{3.7705846673426456`*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"7730b597-57ab-44aa-9fe4-b83ba25dd6e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{" ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        FractionBox[
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "2"}], " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], 
          "2"], "4"]}]]}], 
     RowBox[{"2", " ", 
      SqrtBox["2"], " "}]], "-", 
    FractionBox[
     RowBox[{" ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        FractionBox[
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"], 
         "4"]}]]}], 
     RowBox[{"2", " ", 
      SqrtBox["2"]}]]}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Omega]", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.770583688807681*^9, 3.7705837231277533`*^9}, {
  3.7705837935265503`*^9, 3.770583803483451*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"5708bf2c-ba5e-4921-9873-28b1fb3670dc"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwtm2k4Vd/bx81kjMI5ZucYomggClkrkhQyRzIPTULmoZQhCcksUxlKKFHG
hLVElHk8FTKUWfkZI8Rznuv6v9rX57rX3mut7/2977X3iy1u72bkREdDQyNM
T0Pz/9fbU3pLOztkPGMR3jg+GY4mA/lWB7fIuP0MQwWH7H2kv3tkrfIvGRN1
lyuGb9xHYsfd/7ktk3GDEVq7vXYffYiMZxmdJOOLnBLy/TwPEIv8FxHcTsbm
utXiLNej0M0PT8UzWshYXyrRX/ddFBowuyLh10zGdU1fX+mxRKOXd/7KHKon
Y1XegZ2o/Gik3y14NKuMjFsTplhElh6iRC/bc3fTydhL0ljR0TQW/WOR0b/0
mIxfz3dH1YXEIufMRYNjSWT8zaz2REhJLFJuCjFbiCFjesvbgWc44tAA/3M7
2xAyXisM2P7ZGofE3s/4wqtkrO03qL1qlYBe0no+o1EmYwJLhEDwQDI6ZlzI
lKpAxnHpHME+gimo6dnYlcOHyFj2wVIxnVUKGtU2kLOXIWP18xXEn2MpiC9G
rqJBkIyLLxbSDi89RiEC083hNGSsklLEG3UkHe12EZUV/UfCYn/Yxyxvp6PM
WrPoyr8kLH+2SLnnUzqqsv1oML1Ewgf/PTtUapeBfuflfNOZIGGdLcOfNumZ
yFzBao69hYQDJy0rU/iz0GRYot7zJhKuWYnettfIQp6U1uITDSRsxCynFXEj
C8X4q3i51pBwocZY4o/GLNSA+P91viZhv+HIez98s5G8bg9nQgIJ/5mnue3+
Xw5idNI+QrQiYcWURz+KpfNQj/XhC3MWJFz8xFxo6mIeemIueKvWjIQ3XTnU
/GLykJLufx/tDEiY4B1hXfAnDzkrpFgUapLwjvhrh/OtL9An2qm7qrIkHH3r
B5q5V4Cin4R3Wq2J4+PBrLdkNIqQ+WP3lYMr4vg8ScaIHFyEJOIvEukWxfHL
wXsid3ARqr0n75A3K45tzl6ysYKv0bwL5c/8d3Ec/4rt1btTxchAVUrkbqM4
druemsxWUoL2fP3okhMnjpX/hO7av/gW4f3ZEWEx4lhYKddEnq8Uudy59cw5
Shxv1Ao/tlctRU1SCkOy98Qx5VqogHV4KQrwzjpX6ieO+/0UrmSLlKEfPIGy
jTbiOOuENLYwL0dv9Q5NT8iJ412mFbfcFyqRUUOag0yLGBZm/ayYU1yLJPrG
h5ubxLBciML1qvFa9Gdc/qJzgxg++WHoIZ1AHUplajDIrRHDqgFPnx++V4dG
deZOCBeL4UCl+0orVgjd6FIlcCeK4WbGlcLL0RhFfB9qW7cSw44WGjzD5h9Q
4H8nXGJ/iuLUxaeioXJNqMo37VrxeRG8Mc+ne6+hHZEcbz7/ekYEL9KvR3iM
t6OHBmdGaTVE8IBVn6E5Yweyl/ljaqIogtnu/hhn0+5AbIOGJ/8SRHARzUo0
c0sHslbfRdD8IYxf+fuPLLd3InpGv48UL2H8WVRCw2yiC7ku6tPQuArj1p47
I79XutDX75KqMpeF8ZfAHZpAhm70qqK3JNBCGL9W/rTsRe5GZlcOZoipC+OB
w4mPxmy7UX7rpMc1ZmH8cvKr9Y1v3Ug/3lRsO1UIT2oKm3aiHhRwhEtHO0EI
Ex5ye7u096C8nk83Y6OF8AKHzdT6QA/a5lFrIN0RwrL/yW0Mr/agogSSs7aj
EN55XWo/INuL2JP+exkrL4TfFxbvdYjrRceOFvR9k6aOv/WCNJzZixz77f+R
xIWwErO6h1ZhL6rhpeiX7xHCZnseE75+6EXXk2sWv60L4kVaW2uW5V7UkvJA
mdwgiL/5bni6nO9Df5Q1bV1qBPG664WBpIt9iPR1K6K8XBD372/Py3fqQwEE
9wHtfEGce1S+8UFgH5JJNbvt8lAQi8eL2B7N60MRaeSG8guCuFP5QhLHWh8q
U/k+t20giIeZ6zPe0fSj0YHkvWfOCmIj5XM+uqz96Jggq/OAmiA2/azAJCXc
j6bTF1h2xAVxd49RwLOT/Ug7s1b/zC8BHM4R99/re/1o4eHQFsOkAO762/xA
7mE/SgvaLKwfEcAhSlK6iYn96JfNcWbVXgH8XeL0KDG3H8WTypFctQC2vETv
R4f6kdqevhuzpQLY5ZVGKPrYjybolwVfFAlgH87iXw5t1PVMHPITyxbAXN7S
gfbf+tHwi1eH9kQI4MdGpTSKS/0o4nHrcGewAL7Wqegts96PDj+YjY4OFMD5
TmXxjNv9KOzavhlGNwFc0x/kdXMXBcnKPcteNxXAU7XnU3lFKahPuOF8+XkB
LLjpRlSXoKDbnD/+3dQRwIpvj+fqylBQ13+iF+fUBLCGf3ekoAIF+bxN5xkm
C+CbAy4oSIuCxHKrcZowdXxm5dN+HQr6nPDN9QK/AKY1F6fl0acgIW/+1i5W
AWzyfnuXqhkFNTkp+T9kEMBf1SsSpC9SkJuZqfTZbSJekOB1+GtFQR+UE0Ib
Fol48plLuq4TBbnse3v47hwR5zW+mGm/QkG8xO4RtQki9ljlOqPoQkFXNjjV
Kr4S8ZfnfAwlHhTEWRu5ko+IOCNB8qh9EAVVFRXkOL0j4kHfc3WswRRk9+ST
AamUytkL2ymhFFR2h6koPY+IaRjKg20jKMjaXdLSPIuIl+TPvU2PpCBmu1O7
eNOI2GlB3/d9NAVd1AhxinlIxGm2X5/mx1IQg0L2nnP3iVjUbXXFO56Cisi4
njmYiDv2F9dLJ1KQ2d4Rt8YAIr7d27ZTm0RBNIzbwsFeRFwTEVBwLIWCCleF
2k64UuO+Ou9SHlOQ8aRqwMZlIjb+c1B2MJWCtigX91XaEbHR8wdrdOkUlNfs
T/G0JGLPSH5hrgwKSj3io1lgQsT5LUcyeDIpKDrTo2RYj4jfx9c8XKXyHRY3
4b3aRBy4OvK78gkFeXhej9SB1P1UmLyzeEpBTsOX14KOE7G2nc3vASqb6zg6
lh0h4kWr7vuqWRR0tsy2e2Y/Ec/vsNwPpPIJUSt1UUki1oxfnEmj8qFIi5cm
IkSsbkNfkkpl0qopIZKfiE+VaX7zpTKvrdE9tJuIi8ZOOR+lMkur/tLKLiJ+
riRl3kOdb/PoORtZeiLm+ZtQok/l+SztNpstAo6xaL5ZSF3vGNup40mrBGzh
EP5kgrqfPh+Y1zJPwA7TZBUaKjePqe2hmSZg86t3zmxQ9anWPX736BgBV/1l
6OhNo+aj8ujvawMETCdW1BlN1TOLdORiVi8Bj7zZMpKk6p3wUL65v41ArT8G
68xkCgpfl1VkayLgCBb7tRVq/q53kDl9qghYMv7ckkYc1R/HxQJfvqHyUKvD
8UcUZPBMaHq0kIAn9B6Ecj2kIKUA3g/nMglY2T9z+SLVTzIT3AeDkwn4nQsw
77pHrQcDzoyKRwS8cbUsQZLqPzopZh/xEAJ+4Z5e63abglZj6X+aBRLwz9K8
RscACpre3Dkf7UXA4w0Vvcd9Kaije11mzZmAd/n+gWHuFFSvtpp8wJb6/LN0
NX+p9VD2YpHe3oKA7W63+J2/SvXH7dnvbeeo+6/hXUu3o/pjevIsnRYBB9G+
/BZPrbcg45+VyuoErHVADF6zoCBHmaG4nEMEzMYdMVptQM1vf7uWHy8Br0Yc
D504QUFk2PK2iJOAFX/xJP04RkF8L5tEfzIT8BHp782Y2h+27qK/ehv8+LiT
67QYtX80H3hTRB7hxzqJYWkePFT9whJ5O/P5cYr2+Xs3R/pRB/jD7JfDj6ek
Z5XpqP0NbF7YEMvgx9ublU7+Pf1IzENwxOMRP1b87ZIgSO2PP2xy8vl8+HGX
ycbvwwX9yFm1RNVakx+f06p2q3XpR5Q/3PLMJ/gx18C9L/WO1H791lOsRIkf
e6jqOry+1I/2ySgz0sny4wkp5UtQtx/N8tV1PN/Nj+V/Bgmck+1Hrkutdr+/
8+Fslco1vh99aLhIziT5Cx8e0OLeefm1D52/+ug06ObDghsMpP2dfejQqNH+
uEY+HOtuqDH9vg8ttX9bUXzJh9sM6ErsEvuQT8HU/Vt+fPjGVLes+8k+FGRL
/5ptDx8W2sn6th3di0o6tWP62Pnw8r1ub4vgXvRDPdo1k4kP2xQTwnK9e9Fp
Yd6DBzd4sYpX8yMm617EOSBVYjTGi0OwZyq7fC96Ynz2bWoxL5Zl9o9Vae1B
6HRchbQuL6Z1+ZeiuNmNaOREkea9vZg/qrrokUoXGohKvf+ynwdnPKuNS7T4
hHo/ir2y7eTBPKYfzrirfkJtOy+6eD/zYG7aZT9j4U+ozrOCeLeGBw9HZZ45
PNaMcix7X5rk8mDt9osvDK82o2v7Obr+ufNg+8B79JcCm9Bmy12CATsPFl6s
vKaY34iEWK8UrGhwY5GJqDq9Q/XIuq4tmqTGjVsOZ/8XsqceZXscdjc4yo2Z
2CPedP7BSGpwQ+mVNDcO/meTVFKL0cFXDxsd2LnxCa9a70RdjDT0S0d6+ndj
k+IIFc7hOnQ1fpv3zZXdeHGjQYr70Xv06rTD32G73Tiv4JjsvOV7NL/RPMRu
uRszaK0m0Mm8Rx4OcblX9HbjTzZ5Z3saqtEtRYnDYkd2Y93NqS7urXdIpCjh
scgaF3aTQtGHfavQ9aOyjINCXFhEbnCk4nE58mB898KHiwvPynGcj75RjgL6
tc/y0HHhy3zFqmka5SjS2+mRzhQnftg8k2fzuwwVlmcRq95w4qrWMI04rTI0
c5RfPuk0J5aJZrWOpSlFl5UYLpx358A9mfYu/VklyJUp4e+sPQc+vZATU36r
BPlQxDPCTTnw2wTOU+3mJSjcB4zVqnBgNgX9vbncJSivIuD6AUYOXP43p7CV
rRhNKC3e2ZXGjuVJ650Oi6+Qg/JwfkMDGw57ZFsjyVGAnPOVzU5XsuHGGO0q
I0o+ukaMo/9cyIb93pCLvj3NR+6bmtYdcWw4yPLOrRWFfHQLFez5ZsOGTR0T
ncxsX6BEbe+g+U1WnNPwpzXm83PUdIHdhKjIiilTb8PaB3PQ509OtBnSrDjz
8Beu4uIc1HYcvRYRZMWWOo9OjoXmoB5Bj10SdKw4ZUZRT0kuB42MfKmT79qF
y7M/jKSGZqP1y7kyp1x2YW52ledb6llI1k9lx/UZC+Ym6Sc/GUxH+Lu+7M9k
Fvxf7R1h59h0ZKbpYHrhAQvOYZjP69ZKRyGc0S+BKwtWm9shx71NQ9+efb+w
+xgLfoRpbj5OSEUR3XdL3rQyYzWxANZ/HilIRDlpULKOGX9auLeUcjgFlWUU
MKWVMOPsczVmnxaS0ejlnkshScw4h114YcI9GSlvk3cZ2zDjJ1keSxu+SWhS
ttluZYkJf7ujz1aflYBuxQ5GX5lgwmcWLDtPX0lAPH/+qxz6woRXdw4mGB9K
QOr1BM6PNUyYR749dLs+HiVduFadFM6EMw+9oQmei0Onwjj2KAsw4fTTBaE3
zWJR9nfjRv+TjNg33ba1mS0KHRk/stGnyIi/KtFoP6+LRI2z3IcO7WPEYxFv
K094RKLJtc70SU5G/IDnACFt8AGS5dH1NB5iwH+jz3kPVkSgt6dPkeR8GfCm
6li0RUw40tQjm0dcY8C+jxcitXXDUZ8xXcxPKwa8InzkwSBrOPpji/+mnmLA
640W3gsP7iHVQLVuJh4GfJDWZrTwURhqLFa8O/qKHu/jWxDQqwpBphV7KlSz
6LHOt7PzjHdD0GTN0lxyAj3uaXgqZHgmBLG0lFzQC6DHhxUO9qQOBCO98QMH
q7Xp8b+ntLO9jMGIQpAcTvhBhyU63Tt754LQZVGGvf/10+HjNYGNgdFBaF3y
p87Zz3S4/HEeg4R8EBJQyC6nKaGj9uuzZS5et5G1nvDDG7fp8CKHSUYO+y00
Fcyrpk2gwwEyR+c/XfVHrLeL/0tgpcO09vOVLTz+SN5PJ3d0ixaH0icw9NT4
IR/X26wBY7RYzG2Je2qPH2KynPj6qpAW/1c3aDHR7oMkFMu9eU7QYme2Hy57
3LzQmYPnZWwO0mKNcT+kLe2FXGRnhl6K02L1jHg5y1FPVCYmfEqLiRYHUwTN
+Ew9kSbHPR6/Thqczuae8vSMB7KfNCn+bkeDo9488COauaPwsXl7WRMaHMTS
feW4oDsqHIrg8z1Ng58QJQMPfHBDSz01t3fvp8Gz5q0H/n13RXR3dB6HT++g
LH376edSNxA4PNNtyLGDVooHh2vXr6JwaeHjc4vbqNpV63zr46uoQ9gwK4yy
jYROGirwqVxF1qzvXCufbqOY1LtGZnevoFs/I9iEj2yj5Lavt0QFL6PqpH1a
02b/0JXzb7Nmwx0Ri+WUA63aP9TJxi+Xo+KIzMTyQgTE/6FHptx0Fv85oKVC
Mtad20K0XuM07ywdkAwWUX1zZwvhPRaiy8AePZ7dezggfxOFJ6f4zinYosni
3vMJDzfRa3bLluRfNkjRO971lccmCkjp/7ntYYM6d7heDattoqz9akulYdaI
iZdNWrN7A33YmaKReX8JeQNaYfaNv+jmxuFCcXcL9IEBq0qO/EW/fnhVyXBY
oN0tQRfVG/+io8rvvzx6aY5emWyluMf8RdG/+s46/bqAxq+u8fST/qIsgSgX
fNsMGSX+Znlybh1V/5N/XT5ojLIsXklXHlpHJIZnLJXRxmhe5PrpLt515M3A
rvFF3RhFFkyH0o2uIXOHJ9NOeUaovu7ntrPXGmJKyj1pEWKIDs18WzmY+QdZ
Kk6OnOzXR14LcjL8YX+QaED3g5O2+qhqLdhq+9ofdFdUfvnLLz10kkm2qe3Y
H5RNkDhfzqqHjMgBKVf7VpH4Non1pfk55G0loJLLtora9SVrPI6fQdWOrq6R
SytodIZgXDCojbavf8i5+W0FNRjuuyt3RxuFB1xjgy9WEPORylWOltPocUr1
0JDGClp/+OBYrasWqu6+eIcvYBkN/FpKubKggba/vi79Z7uMmlVLNtKfayCN
Ubrpce1ldEaVwWDEUgO1zhcalPIuI7fYPV/vt55EQ2yb4gZvltD1zwJFNJUQ
7WilNz6YXkTJfj8ynX1PoFN6/627dy6ioGallVc0J1CEiaacecUiMorK+fcy
Sg3tdphLkgpbRA87n3+pyVNFpLuqlxtEF9Ezsy9ikQvH0anqwV3/zBaQoNTt
L+wdSuh14fPjzaoLqO9XRo3bFSVESHe7Gie2gKRbNTQ9GZQQZY0p/lzff+ig
UWKq5smjSDLQbHfmxjwS2QmPsGtXQOuWs26HG+eR2cNYZnEvBdSmFtT58eE8
qslnWDIUUkBe289j5sWo8YLpb4vuR9CH4FV2qP0biZNuFMTLHkbJ9g9c+nb/
RldtLpdqDR1CVzWF264M/ELx60NPwKNDaDejVlTcjV8o5baXxvTiQWQTkbjr
Z8IcurnyxaC4XA5txSgwhY/OIPoXCdNr+TKoy63ZSaBwBg1GHajvOCSDcg0s
P772nEHOQcLb2dX70Fme0LAvTDOIdCLSVrhPGqUm9dDJyE2jj0cMf0YJSyEX
H2f72j9TyKSkWeFqmSSCFzbqDfEUsjE9IsSoJ4mmCaTgAOMppGCoU2sZKoGU
Mm7utPpPInmT6JE6ejK1HzLa2GpOItl568GWFyT03Sq1boV9EonKiaxZ6ZFQ
mGj9beGsCVRsYvZoJ0Mc9ebs3nJtGkeaL3XE7uiJIfeC4nXuPT/RI7uJ0+ZD
gugQp2uoxugPdGdgdeeruSBa9DjA6Vn0A4XQtNy3+SKAPNQKyH3aP5C3CeWL
5QAReXfm6CffGkPiRS5i+9b4kZKi3bcmnTH0mMZU4XcIP/rzWNRxjW8MrZZF
XPXZzY987TP8zd+MoujE/ecqDvGh5dn9OkfbRlDm5sxlwr29yKss3zrZeQTl
SmdflxXZi/7clvRaoxlBh/0Kdn2s2oPWd4s+fXd0GLmXfNnwXeJBW0o8qyee
DiHBwRvJe325EVPoetZpj2+IdsmuuieIA93X9a54wf4Nlbx+/b55kB2x8C21
srz4ivbxN3LsqLAj1oK5Py2DXxBfv9QgIw0b4uoc1j2vRUGuUdYJCrksiCD4
cf0CoRd1cAjG3jjFgFLHT3K+e9uDhvLrWc5heiTwuo4soNeDArSsCbUn6JHw
ySr9oeBuJPxFR175BB3S7DDTqad0orwP3BE39WiQmTM5u+fWZ1SQs5rhYvq3
LvKmZ0R8+SeURjTkJwau19XeanAzmm9G0ZH894pz1uokEhzUe2ya0PDV44fN
11brllDuYLdGA0pUz9TvKluqE1E4cyCHuxr95Rr0/Tw+XbfwONVxMdUDYcOz
Jy+FZNfdokv8ePqYBaCxN/nEVXtfXT7NoXmv0h1gW9URfMmuSN1Y4WtN+MlE
sDtRXTF1T4P6TefrM42JeYBGLMlk63y/Og1N+Y5DXSWg6drIOPRkUr257Vuk
gvEnwPX0ShfD7nX1K34DzZb7PwPZHt8fvzbX1VkkBhnC6FtA4c3PkuKzf9XP
Bg4F9ZW2ghm6Y60N7ZvqbTIjHt57O8GG1PNyw7Id9SuaHkWDsz3g+AsBMb5d
DOBY6lLrf2a9gCmaPu9JMgNg+c9jlr6hFwxlftail2IEBWme0gfS+4CAhKh0
/FkmMLvolX3rHAXYFVRuSb1iAS5ZvknCr74BqwD5/XlDHEDtz1rpYcIAEEgz
LKKJ4QTsun49WmEDQF6qdZ1dgwsUrflxuV4aBFmyp/5TsdgN5vUDHtSxfwfn
KlU6+Qe5Qd2zjRc9ft9BuAzdhjXgATEbAU2T49/B74A0W7XnPOBgXiA9V+0w
eL/wxn7Aew+oCqqrK1YaBbVjH5Oi9/OCrILt9ncuo+DP0TEd10xeENGn/r0h
ZxRELs38k+HmA+ayaPML5xgw7lq1N97mA3/70TGaqTHQU3v2jfsCAajI1b81
SPkJ8P3kIiM1YXC0j5Jc9/knYNHs5rvQJAwOBf4KOLD1EyxlStUFG4kAqc/8
mix248Am1a7vxk1RsMfJtRfJToDkwMsLhhNigJM9rFLOagIoXBMRclUQB6yl
qenpjybAHW+ePx9CxAEN7UcH35UJsPdSWJasJAn8yhBcka+bBOe8RDvv+pPB
lObhrxkLk6C4XHBnoZsMfsyermElT4ESkopdw34J8O2YR9jk/SlwgT2j/tlP
CdDU92nvE8NpEJtBz7LuKAWesvsc5ZiYAZ8qg2M5S2VAWmkUMZB/FuQPEb5e
kpAFyRez/03rzIK7fgz/3UiRBdH5bR8bX88C9rE97ssh+4HfKbLZLb85YLR/
/oOuuxzwnDumMls4B6472f65uSAHXOP1Rcy/z4HMKLudOA954DTqP6mg8Qu8
eLClOXrrIDC61eUzx/YbbJ6NM9bqPwT0yJMXLdR/A1mV1YAi4cPgTMumerP7
byAR3712+PJhoE6QZs7t/w0OG1QbZf07DPaX3U65+HQegOePWCKOKQA6H94h
R+ICaBCGRpazR8FF28KeKsUFYN1KOnJRXwm8PQs+sxssgC+SaW82S5WAvejV
irLwBWBm2/EThCmDD59qYhlWFkB3pSdz6PHjQKDU8L451yL43PL+tO7L48Aj
c/L2K9lFoBh1f+uXiAogeey+bmK3CFwDRwe62FRBqKCj1rMOKp+DA3NbamCI
8a/q+swiMGPrzT8edAIoLjw8osu4BAZLSS6ptOpgvLFSdEV1CSQfW/paxAnA
KVe2Dc2CJSBScPZuWDYEDPVvX/8MXQZMxKO5Mxya4NJL7efKT5eBIXH+LLud
JihLGkqPql4GEs11k4HlmsDxGtMDhcVlIO3cOGBifwp83HPRIdR6BaRIH2D3
btMCItvzFl/8V8D0ZvCZcNnTwGc61GB/0gr4lBH0ni3yNJCqLTrR27oCrHo1
WCL0tEG4My2BfHwVnLrzhnlw8gwYNkjm9DVZBcO7D5iTDHWAkup+xla3VRBx
S5hxV60OmOQyXfLIWwWz9RPqralnwel3+W0f9vwBo8ZhXk2XdQEzu0Gw/fwf
0H2wp9RbzgCYS1/ESrvWwDiJ9kSdmwEo1HDcYZVYA4k/VfK33xoAfX+/26UW
a4BV0pnTS80QJE9m+TN8XAPMTATfh5ZGQKp+8WZe+joQvn6C51a7CfAb2iwJ
qFgHIYbDh76JmYKWNcYF/e51YGFcv9vZ2xS4ygu4rjH9BTqSH21ESGagIl3j
2hmPv8D19YVwn8gLQMsnwX72zAZ47Xs71jDtIkiOy8yuc9gAWWNPCVF0lmD6
1YvR+KANYHS/6bySiyWI/vneWrVsA/jp8zcsa14CfQbjF6NFN8FE7iG6KEZr
4Lj/qLH8n00w+jwlsmDWFlScBvF03FugQs3z5I39doDFXqebsn8LHH3E57D7
hh149djq/B27LbDr06LVzpIdWGEMP9fVtgXS9lf1tOxyAKGjFE2P3H/g1NjH
jGAnJzD87twNv5p/wODIah2hxAmoJODkoP5/4PJnSdrUTSewoFU4E8m8Dc4q
Wr+xTnIG1i9vP8q9vg0S2wc8TvVdBio+EoN9Cjsgaubu7qrgayD5fCrDoO4O
2N5j3MY9dA0s7uOUH3PaAZW04gpBytdB/uDa3d8pO8BZwEkkbfE64DvZKsW0
tQMkXtxwkvO8Af4yHn8naE8Dxz51f5K84A7yPJbbn7jSQKduJ8vEh+7AZKTo
h3ggDdTQDavJbXQHJVUk9n2JNPAET6rsS8WbwPk6u41iEw30K1HmfyDkAfq6
Rhj0ZGnh2xNFz36ze4GQE2nELiVaeCBBL1FW3wscKjSRN9akhf9ueGeRYr1A
VOjnCxaXaKFbjjnzOT5voKFUWugUQ70/1jLk9X4fUJIebhC0RAullVyvmN7y
A617wqe4aOhguGNsRUWXH5iMuheUzUEHdabYsvik/IHQrbBXjfvoYE/xluBQ
rz+IuBTCwmZDB6U3X91qUA0EtsJBOKWVDnrM7TgAEAQCk25fkPlGB0VCmhir
nwWBZI7b89WTdJDzpZXPJbY7oO1foNAwLT3kCD7/hDx0Bxwb9veTOEYPQ2nu
L9A33QW7n3ofevOMHupwav5pTwgB+/m9mzXe0sM09gO57l0h4PQjL+s+RA/r
LvJ113KEglt3PKPXBuih626JNKvIUDBtc3P6BDcDbDg492YoKgxgsRtZLbcZ
oIeCYozcm3DgluO4e9yMETY0dL8QjI0CMf6pGTEOjPBn3fUq25Eo8NqgY99x
d0bosQu4OR+MBvPbyidjHjDCPYrS+u+6o4GLJZvHsRpGSOJTC8kVjQHX9r7t
jRZngm+fsOmNuceCyLlJG2V5Jjj3LPjO0JNYUPhB8NeYChMUPD2rqtkeC2bc
7zEomzBBJifeQ2b748CVdvOjY+FM0MVHXDbvVxxwDt9JPvqLCbJ/uPo2NiwB
hFspkkfXmWAF09Tx9HcJIE/xanEkIzPcyO6ZEfovAUz86GkeEWGGIUz1ZRGW
icAR5K0/MGSGMlU3nvKpJAH7dd2LwxXMUD92Of0NZwqwvpYmfD+YBSKVrjv8
gulg89uujsWHLPBZ79htfpt08FjHP+hSGgsUnPH4lJWbDrr3mY8cLmWBmszW
rEbyGeDUFG/20DgL3NCBLzTOZgIZxziJI2d2wePKSff+ZDwFK1YR+79zskLx
sAPnFSxyQGz72qC2ICsM9b4oczMsB8iduBz9VpoVqqU6Xt0uzgHOQqd/34es
0L5uly0LSy74NkBffMSDFbb+8Fn58T4X1F24cySinxXGhcbXrB15Dh4Y+hxX
yGCDL5cGHV7b5oP4NlmXVwVsUHJFo4UhPR9kaI88kaxkgwUhE/EN/fmg5MQZ
BkIPG6xDInGBugXgq4xA5xYzOwzY2LX6Xb0Q7KOrc2zyZIex3YdCXiu/Ak1v
GWMtznFADVJBasGJEtAlV/2hx5wDtkQfvf3UrgQM5LuunnPmgFN54XHt90rA
/JMvF9WDOeABgaGnPR0lgC+qQJJcyQFfHzroHuLwBjg56L3/ReKENW0BB+6n
vAUMe5Mm72xwwhfB1crXZcsBz3wQJw8zF2w4XZCQblQOxD9dUXq2hwsyF31+
9y+gHKjfUgv/dIALvgFVuhfayoH/+E9JbhsuuIfQV219swLMlx1xymnggq2S
Vx+VN1aCX7LTN+1P74ZB/OPLnLHV4EvrvYUwLm6Yckxxb4AFBtT3dC1TPm7o
erjMKssbA6M3ZWmSwtxQzoJz70gcBh3JP081yXJDpkhLyectGDTZnUxlPs0N
Y1nPnj5/oh5UrG2djLzFDZ9lfX+6IvUBJJO9Eh7NcEObo2d89rE2AtNAe6W0
Bh4oLVzWJET/CbiwzZE6Lu6FkrddQy4VdYI5/2oGNru9MOXdnV9fWjrBtekH
k9qXqXGcv6E93Qkuf9xXWO+5F36K4bcK4e4C9necD5dH74WbhM8jy+e6gMXy
GMio2wuzHT1e3kNd4PTg10vXSLwwJcXDDGZ1g486+eov9vHC5equT2tF3eBU
la/YuDwv5Hb9eOHZ+25wMolv3EqVF2ZuJUgMUbqB2nmT64YmvNBCtmCunr0H
HGno9D8WzgtdzHdNnPTpAaIvm5KZZnmhNzbJWlHvBSZPq961LPDCjAv7zjHo
9oLIhMKhmDVemGjCLklr0QtWAmNI/Ix8cN6j4km9Ry9o0TV7LS3GB7Ovqp80
f94LfOYnPp4x44N1R74Wv2HqA69+fJlmt+KDY0Rxq9s8fWCM8pmt24EP/jvf
oagg0gd0UZGhxU0+WBzrW3jpaB8gxXp/vxrNB5sBY0m2fR9oP8y4GvmBD265
XBFor+oDdFJr/Oc/80GnTW9zqYY+cExgRmVPFx90X3y57dzeB3Lo2u+mf+eD
tEwj3zPH+oBfbyL7q3U+yKgS4/GdpR9IeEtItMvzw3czmr7BRv3g4lU+7bij
/JB/MDJc3bIfPLJiuWaqxg/92nxjRx36wYbWr+LvOvxQcg8/U69XP+jiK1Od
d+SHIVdbX95I6geBVZrGXOn8cJd6/tdL3f3gyKWuBZtsfjjw6rvlzy/9YHbn
UkzJC344uMobbzBMnU/b57NhGT+cCWesHp7tByqUfOpZzQ//zYfeaqajgCX/
o9/He/nhfRoegWAWCigU/hBwdIAfaqRmV4lxUgDRabCcMskPfY/czeMmUsD6
MscBIg0B/r6QS6ySo4CSlLTPV5kIsMlYKu7pEQq4oip9uZqdAE9rpbu6KFPA
1xCYY0kkQM+9X/dWQAqo5PYkPDlCgBGVwkrMRhTgWr5TPn+MABke8dERzChA
yiLaGADq/crdJRwXKSA563nM6DkC3P1M+dYLOwrwOfiVgexEgGKux84kuFGA
fK9jjud1AowM23722YMCJn0WQeNNAmyv3PEf96YA0zrWQKcgArz8acq6OZAC
2O1TCBVhBHhnZdL8URAFNDJKVDBFEWCXvdFT1WAKUNQ7sfgihQA77tDNwnAK
+LXwOWY9kwBP8cYPpkZQwLNEswM6zwjwjbzECiWSAvYOuV2eLSHAnS/G/v9i
KKDtzhaDaiUBysn4UCZjKSCM/CAnqpYAJceeqZbFU8DytZzvB1oIULXkBf1m
ElVvzoOBt7sI8LMzvOiVQgH2b98TOigEKMzlltX9mAIEzM5UiHwnwG4ZwW6e
NAro+dtn7PaTADl+J04pp1NAZKbdIpohwA92SSMwgwI0Ts7H7F4gQBikXi6X
SQEb4wEH7P4QoLG6oNM2ld9GMLe82aLmq0r019snFHDtQOJlOnoitD1SoH3u
KQWQusQYjXcRoYF8kHczlQc8i3JyuYiQ7laHp3QWBcTxq8AVXiL00lA4eZ3K
Z943fT8lRIS/WYqH4qlMY2McmEQiQunaIq0nVK6iGyVM7iPCuQqGWw+p7J7n
UqF0kAhF3i3dsaXycKdgEqcSEVbfSJ7jorLe3xbPSTUiHCKkqD2hzl9DCjCq
0yRC+s9TXmxUltWVOZx8lgjZ29lTLlDX/9j7K5erIRG2ZQvmhVD3x/z0/ryW
ORH6D1Y/j6bq4fNJqV3Yhgh3WElp3lS9xhcnXq46ESHpKTHiBFVPI8GkyHYX
Igyt3/Aap+pdf+rU1eeeRBh1sNj5GjUfh1yXtW8HEKEU1xuHTmq+nqTkSJkG
E6E3YvXck0j1U70ho1wEVa/nZhlK1PwGzNKMMzwiwprluqlj1PxfOGGTXZZB
hEoKliyDURTQ5Mx5NzqXCGcdShYCHlD9Fltr7VhIhC0LDuIbVL/t/ikotLeK
CD8u6EQkU/0YxN66MVdHhF8cuSmlVL/+PhrwreEjETJE2aaXUP3cEvE12bOX
CK3neurPUP1+7O1973MDRJi0b0V9/CYFvBhUMiGPEaGQ0ePrNq5UP8oncffO
E+Fps8vcq84UoN5nGH2EVQAmLTjZPKXW36t/NNdZuQWgxyCXpAq1PgWlS3R+
8AvA/h11iXI9av37czLHSwpALWMTEd1TVD+JtgYvQgH4yX7gDM0hChDTCbD9
rC0A6d08RZ7KUsAjDxmQrS8AuU18v4lIUoDLx/tbBpcEoPqBYJt6aj+RvH7K
t8RXAPJnKDkn0VJAYuKyaUSQADQ9Iy2ivtkP6OpyFG3vCUCSNG/Ep5V+6nci
7RJXggC0ykoZC5nqB48ral3cXgtAFxe6vtjWfsBOp2wvPyEAp0dkHhyI6Qfv
fOmNJ+cE4KFx32GJ8H7g/LtT88mSADxQ4zdKG9QP8Ncrkpw0gtCWyOZ+7UY/
8CxOm/4tIAi/rM/5/z3bDwYubbsWGQhCYl68jTxtP7jf02LjdEEQBpH9F4PX
+oDimRQDYWtBuPnwnEfN7z4Qo3DoyMPrglBCbOH75Lc+cJLVftUlXBD+qsqr
4X3TB/IrPwYeqBGEXmaEnJ2LfcBULt5l/IMg7K89r9Z/nnre5FpbZXwWhG9/
+9sknuoDl2LW1Nm/CMIVlUeLnXJ9gMtJhu7XIpX1+WRP7lDPP56HES+lhWD0
5f2/FJ70Aq0bJkmyCUIQ/VINzWvvAV7x72ncUoXgv9dWMku4BzyrJLmUPhWC
wc8y3A6W9QA6ukUNtVdCkKzWfvdOWg/AyQ8X9D4KwYKWhOMBzj1ABTedu7km
BNdf6zltb3YD+T3H6aosheFY9nr3ZZFuQHgn7KYlIQJ/nZ5eoU3sAPEeEXGH
vojCM1qJ+ZGXm8BG26uqiO+i8IHMdFmjThOwl+4eGf0pCkP13V1ZDzQBhSGi
fNyCKOx0edP3buEjmM0xnVhnEIMADDS8DvgIotmngi1ExGDIVDogxTWCjpFd
7wUMxeDP6ibaJ58/AKPw83KZFWLwRqwpk+VEHcizWNB5904MGuXLWeeU1oG/
B+Kc+2vEoHI587e9IXUgq7fnKUeDGHzhwLYdKFoHfouZ8QR1ikGPxqQT5pdq
QcT7S2vW02Iw3krV2G34PahbuFovJiAOp/jMXokwvgM8jazDasLicP+i4nni
tyrglPJyw1xMHOpELMZqFlUBdvXfCnFS4lDi7pPT0mZVwCLKPY9WQRxWmss9
kyusBCuSvlE/zolD1e2LnacsK4CsZZjps9vi0DEl+cLMWCmwuFnBwxAsDgdE
81neV5WCiPvTnQ5h4vDkY8mDTY9KwUSp7llylDg0NbzbEaFeCrLYeUHOY3FI
/+5Pfd2Tt4C37vm+rFJx2Pasf3Li6htAI968mT4jDlvvCV1xN30NDir/rdr8
JQ6f8/6d0uB+Daz19vtYLojDQs/rqmHtReC9/6MFgTVxGNBR6WWkXQR8ei5M
pDKQINtdwkM++ArMhU53pIiSoLrVSz6G04WAMrkrJ8GUBONPZ3C5ZueBJpMH
Ge/MSdAi0uqpqmseqPjAkjJiSYLZx5a97VTzQPIT5uj99iRYGnC2rYzyHJia
Mfo0uJJgzo2ptpvcz0HfR5qzy/dJsEb4Qh1NSi5oVLh7ihhFglZsmX7yV3NB
WfaOOoghweTffVHFqrkg8fa2QlQiCboMSLoXjuUA46NbwuRsErRdzPvnfzgH
9DxbWzSqJsGCgfWzR0ezwAce319+tSR4tI2t2r0yC7y9+2fyCSbB/GCi+EZM
Foi/tDo420SCk54kz1X1LGC4d/ljSC8Jity0rmTRegq6QudT3/4iQcqgn+KV
/zJAh/3ESR5RMnS8J1dfUvwYjDG8WE8ikWHOJ1We31ceg5W8K8VEKTJUOl+1
3kF6DIhzc0LictS4f4rXnccpwNFzae2gKhmOMYYW+UQlg43QnSK9C2To1Hjl
/kBMIuCQqnfsvkiGAT+E1f8YJgKxTyGCptZkqF/aq/eCNxFosTM9uOREhiOp
+90/PkkAsYnsjtc9yfB3nmN6f2U8kHpOFHjwiAw7Cve+d2KIA8e1B7vYE8iw
TdFx1LorFujOZNyPTabGtQ+6fc+IBTflxFZTMsmwuuDuiLNyLKgpl+rKe0mG
y8ZaSaITMcCoSSG8sZkMB8ay2RtpooHTlVW1M61kqCBlGxGYHwX8WCuXWzvI
cC6VTVbUMApk6qvY9faTIUdi/lXy80gwTYFqP36S4bXNM/S/LjwAG350y05T
ZJhuB9q6mB4ADsHGgplZqh5/9f/FV0SAIzba/IuLZMi/snoxnxABtGh3dXit
kqFw0rffay33gXluS9j6OhnSLvmVCwfdB9e0olVvbZHheGndDP+R++B//2/A
//2/Af4PM/Rr4g==
       "]]},
     Annotation[#, "Charting`Private`Tag$1063005#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-0.3535525593381729, 0.35355336002881405`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.770583712151019*^9, 3.7705837239447727`*^9}, {
  3.770583796270976*^9, 3.7705838043187933`*^9}},
 CellLabel->"Out[48]=",ExpressionUUID->"eb2aeaba-4887-440e-ba15-00f17892d920"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"\[ImaginaryI]", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       FractionBox[
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], 
         "2"], 
        RowBox[{"4", " ", "G"}]]}]]}], 
    RowBox[{"2", " ", 
     SqrtBox["2"], " ", 
     SqrtBox["G"]}]], "-", 
   FractionBox[
    RowBox[{"\[ImaginaryI]", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       FractionBox[
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"], 
        RowBox[{"4", " ", "G"}]]}]]}], 
    RowBox[{"2", " ", 
     SqrtBox["2"], " ", 
     SqrtBox["G"]}]]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[41]:=",ExpressionUUID->"7a02dd12-8adf-49b1-bb66-01246d7b0911"],

Cell[BoxData[
 FractionBox[
  RowBox[{"\[ImaginaryI]", " ", 
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       FractionBox[
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], 
         "2"], 
        RowBox[{"4", " ", "G"}]]}]], "-", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       FractionBox[
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"], 
        RowBox[{"4", " ", "G"}]]}]]}], ")"}]}], 
  RowBox[{"2", " ", 
   SqrtBox["2"], " ", 
   SqrtBox["G"]}]]], "Output",
 CellChangeTimes->{3.770583669890718*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"4fcd9ed5-ba90-45ac-ac1f-8c1676fb8c30"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TrigToExp", "[", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"Cosh", "[", 
       RowBox[{"2", " ", "\[Pi]", " ", 
        SuperscriptBox["\[Tau]", "2"], " ", "\[Omega]"}], "]"}], "+", 
      RowBox[{"Sinh", "[", 
       RowBox[{"2", " ", "\[Pi]", " ", 
        SuperscriptBox["\[Tau]", "2"], " ", "\[Omega]"}], "]"}]}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Cosh", "[", 
       RowBox[{
        FractionBox["1", "4"], " ", 
        SuperscriptBox["\[Tau]", "2"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"]}], 
       "]"}], "-", 
      RowBox[{"Sinh", "[", 
       RowBox[{
        FractionBox["1", "4"], " ", 
        SuperscriptBox["\[Tau]", "2"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"]}], 
       "]"}]}], ")"}]}], 
   RowBox[{"2", " ", 
    SqrtBox["2"], " ", 
    SqrtBox[
     FractionBox["1", 
      SuperscriptBox["\[Tau]", "2"]]]}]], "]"}]], "Input",
 CellChangeTimes->{{3.7705834926668587`*^9, 3.770583516904114*^9}},
 NumberMarks->False,
 CellLabel->"In[37]:=",ExpressionUUID->"21168922-8154-451d-84ba-ea73ef4d641a"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "4"]}], " ", 
     SuperscriptBox["\[Tau]", "2"], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"]}]], 
   RowBox[{"2", " ", 
    SqrtBox["2"], " ", 
    SqrtBox[
     FractionBox["1", 
      SuperscriptBox["\[Tau]", "2"]]]}]], "+", 
  FractionBox[
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"2", " ", "\[Pi]", " ", 
      SuperscriptBox["\[Tau]", "2"], " ", "\[Omega]"}], "-", 
     RowBox[{
      FractionBox["1", "4"], " ", 
      SuperscriptBox["\[Tau]", "2"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"]}]}]], 
   RowBox[{"2", " ", 
    SqrtBox["2"], " ", 
    SqrtBox[
     FractionBox["1", 
      SuperscriptBox["\[Tau]", "2"]]]}]]}]], "Output",
 CellChangeTimes->{
  3.770583458923716*^9, {3.770583496273169*^9, 3.77058351790373*^9}},
 CellLabel->"Out[37]=",ExpressionUUID->"75eb6ac8-bde6-4dbc-9b35-adb95c084793"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   FractionBox[
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "4"]}], " ", 
      SuperscriptBox["\[Tau]", "2"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"]}]], 
    RowBox[{"2", " ", 
     SqrtBox["2"], " ", 
     SqrtBox[
      FractionBox["1", 
       SuperscriptBox["\[Tau]", "2"]]]}]], "+", 
   FractionBox[
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"2", " ", "\[Pi]", " ", 
       SuperscriptBox["\[Tau]", "2"], " ", "\[Omega]"}], "-", 
      RowBox[{
       FractionBox["1", "4"], " ", 
       SuperscriptBox["\[Tau]", "2"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"]}]}]], 
    RowBox[{"2", " ", 
     SqrtBox["2"], " ", 
     SqrtBox[
      FractionBox["1", 
       SuperscriptBox["\[Tau]", "2"]]]}]]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[38]:=",ExpressionUUID->"26d75589-4842-4f5e-ba78-b1bb8b3c051a"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "4"]}], " ", 
     SuperscriptBox["\[Tau]", "2"], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"]}]], " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"2", " ", "\[Pi]", " ", 
       SuperscriptBox["\[Tau]", "2"], " ", "\[Omega]"}]]}], ")"}]}], 
  RowBox[{"2", " ", 
   SqrtBox["2"], " ", 
   SqrtBox[
    FractionBox["1", 
     SuperscriptBox["\[Tau]", "2"]]]}]]], "Output",
 CellChangeTimes->{3.770583523197834*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"d48afe7c-de52-448c-892d-20bb8675d1ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TrigReduce", "[", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"Cosh", "[", 
       RowBox[{"2", " ", "\[Pi]", " ", 
        SuperscriptBox["\[Tau]", "2"], " ", "\[Omega]"}], "]"}], "+", 
      RowBox[{"Sinh", "[", 
       RowBox[{"2", " ", "\[Pi]", " ", 
        SuperscriptBox["\[Tau]", "2"], " ", "\[Omega]"}], "]"}]}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Cosh", "[", 
       RowBox[{
        FractionBox["1", "4"], " ", 
        SuperscriptBox["\[Tau]", "2"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"]}], 
       "]"}], "-", 
      RowBox[{"Sinh", "[", 
       RowBox[{
        FractionBox["1", "4"], " ", 
        SuperscriptBox["\[Tau]", "2"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"]}], 
       "]"}]}], ")"}]}], 
   RowBox[{"2", " ", 
    SqrtBox["2"], " ", 
    SqrtBox[
     FractionBox["1", 
      SuperscriptBox["\[Tau]", "2"]]]}]], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[34]:=",ExpressionUUID->"51e9c2ff-a3cd-4275-a74b-7efc072b9559"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", 
   RowBox[{"2", " ", 
    SqrtBox["2"], " ", 
    SqrtBox[
     FractionBox["1", 
      SuperscriptBox["\[Tau]", "2"]]]}]], 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Cosh", "[", 
     RowBox[{
      FractionBox["1", "4"], " ", 
      SuperscriptBox["\[Tau]", "2"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"]}], "]"}],
     "+", 
    RowBox[{"Cosh", "[", 
     RowBox[{
      RowBox[{"2", " ", "\[Pi]", " ", 
       SuperscriptBox["\[Tau]", "2"], " ", "\[Omega]"}], "-", 
      RowBox[{
       FractionBox["1", "4"], " ", 
       SuperscriptBox["\[Tau]", "2"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"]}]}], 
     "]"}], "-", 
    RowBox[{"Sinh", "[", 
     RowBox[{
      FractionBox["1", "4"], " ", 
      SuperscriptBox["\[Tau]", "2"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"]}], "]"}],
     "+", 
    RowBox[{"Sinh", "[", 
     RowBox[{
      RowBox[{"2", " ", "\[Pi]", " ", 
       SuperscriptBox["\[Tau]", "2"], " ", "\[Omega]"}], "-", 
      RowBox[{
       FractionBox["1", "4"], " ", 
       SuperscriptBox["\[Tau]", "2"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"]}]}], 
     "]"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.770583450151266*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"0be7435a-9a71-41f5-9f10-937923880210"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 SuperscriptBox["\[ExponentialE]", 
  RowBox[{"t", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "G"}], " ", "t"}], "+", 
     RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]]], "Input",
 CellChangeTimes->{{3.770584183679028*^9, 3.770584186439301*^9}},
 NumberMarks->
  False,ExpressionUUID->"ca2d6e8d-6953-4f14-9aa2-018fca6388f5"]], \
"WolframAlphaLong",
 CellChangeTimes->{{3.77058472219497*^9, 3.77058472342726*^9}, {
  3.770584806366572*^9, 3.770584806862028*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"c1877fbf-79c5-44b6-aa11-f632245c5b7f"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "E^(t (-G t + I \[Omega]))", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"E^(t (-(G t) + I \[Omega]))"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             SuperscriptBox["\[ExponentialE]", 
              RowBox[{"t", " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{
                    RowBox[{"-", "G"}], " ", "t"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/I.html", "text" -> 
           "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[ImaginaryI]", HoldForm], "\" \"", 
                "\"is the imaginary unit\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Exact result", "scanner" -> "Identity", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             SuperscriptBox["\[ExponentialE]", 
              RowBox[{"t", " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"-", 
                    RowBox[{"G", " ", "t"}]}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             SuperscriptBox["\[ExponentialE]", 
              RowBox[{
                RowBox[{"-", 
                  RowBox[{"G", " ", 
                    SuperscriptBox["t", "2"]}]}], "+", 
                RowBox[{"\[ImaginaryI]", " ", "t", " ", "\[Omega]"}]}]], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate form assuming G, t, and \[Omega] are real", 
     "scanner" -> "Simplification", "id" -> 
     "AlternateFormAssumingAllVariablesAreReal", "position" -> "400", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"ComplexExpand[E^(t (-(G t) + I \[Omega]))]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 SuperscriptBox["\[ExponentialE]", 
                  RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}]], " ", 
                 RowBox[{"cos", "(", 
                   RowBox[{"t", " ", "\[Omega]"}], ")"}]}], "+", 
               RowBox[{"\[ImaginaryI]", " ", 
                 SuperscriptBox["\[ExponentialE]", 
                  RowBox[{
                    RowBox[{"-", "G"}], " ", 
                    SuperscriptBox["t", "2"]}]], " ", 
                 RowBox[{"sin", "(", 
                   RowBox[{"t", " ", "\[Omega]"}], ")"}]}]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Roots", "scanner" -> "Reduce", "id" -> 
     "NoSolutionsFromReduce", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement[
       "minput", {}, {
        "Reduce[{E^(t (-(G t) + I \[Omega])) == 0}, {G, t, \[Omega]}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", "\"no roots exist\"", 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}, StripOnInput -> False], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Series expansion at t = 0", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAt `1`x=0.", "position" -> "600", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[E^(t (-(G t) + I \[Omega])), {t, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", "t", " ", "\[Omega]"}], "+", 
                    RowBox[{
                    SuperscriptBox["t", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "G"}], "-", 
                    RowBox[{
                    FractionBox[
                    SuperscriptBox["\[Omega]", "2"], "2"]}]}], ")"}]}], "-", 
                    RowBox[{
                    FractionBox["1", "6"], " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["t", "3"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"6", " ", "G", " ", "\[Omega]"}], "+", 
                    SuperscriptBox["\[Omega]", "3"]}], ")"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "24"], " ", 
                    SuperscriptBox["t", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"12", " ", 
                    SuperscriptBox["G", "2"]}], "+", 
                    RowBox[{"12", " ", "G", " ", 
                    SuperscriptBox["\[Omega]", "2"]}], "+", 
                    SuperscriptBox["\[Omega]", "4"]}], ")"}]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["t", "5"], ")"}], 
                    SeriesData[$CellContext`t, 0, {}, 0, 5, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"t", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}], ",", 
                    RowBox[{
                    RowBox[{"-", "G"}], "-", 
                    FractionBox[
                    SuperscriptBox["\[Omega]", "2"], "2"]}], ",", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "6"]}], " ", "\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"6", " ", "G", " ", "\[Omega]"}], "+", 
                    SuperscriptBox["\[Omega]", "3"]}], ")"}]}], ",", 
                    RowBox[{
                    FractionBox["1", "24"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"12", " ", 
                    SuperscriptBox["G", "2"]}], "+", 
                    RowBox[{"12", " ", "G", " ", 
                    SuperscriptBox["\[Omega]", "2"]}], "+", 
                    SuperscriptBox["\[Omega]", "4"]}], ")"}]}]}], "}"}], ",", 
                    "0", ",", "5", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "700", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[E^(t (-(G t) + I \[Omega])), t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FormBox[
               TagBox[
                FormBox[
                 RowBox[{
                   FormBox[
                    TagBox[
                    FractionBox[
                    RowBox[{"\[PartialD]", "\"\""}], 
                    RowBox[{"\[PartialD]", "t"}], MultilineFunction -> None], 
                    HoldForm], TraditionalForm], "\[InvisibleApplication]", 
                   RowBox[{"(", 
                    TagBox[
                    TagBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "G"}], " ", "t"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]], 
                    HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
                 TraditionalForm], Format[#, TraditionalForm]& ], 
               TraditionalForm], "\[LongEqual]", 
              TagBox[
               RowBox[{
                 SuperscriptBox["\[ExponentialE]", 
                  RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"G", " ", "t"}]}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]], 
                 " ", 
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"2", " ", "G", " ", "t"}]}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}], 
               Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Derivative__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement[
       "minput", {}, {"Integrate[E^(t (-(G t) + I \[Omega])), t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "G"}], " ", "t"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]], 
                   RowBox[{"\[DifferentialD]", "t"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["\[Pi]"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    RowBox[{
                    SuperscriptBox["\[Omega]", "2"], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", " ", "G"}], ")"}]}]}]], " ", 
                    RowBox[{"erfi", "(", 
                    FractionBox[
                    RowBox[{"\[Omega]", "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "G", " ", "t"}]}], 
                    RowBox[{"2", " ", 
                    SqrtBox["G"]}]], ")"}]}], 
                    RowBox[{"2", " ", 
                    SqrtBox["G"]}]]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {"text" -> "erfi(x) is the imaginary error function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Erfi.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Erfi", "text" -> 
           "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Erfi.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"erfi", "(", "x", ")"}], "\" \"", 
                "\"is the imaginary error function\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Alternative representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "AlternativeRepresentations:MathematicalFunctionIdentityData", 
     "position" -> "900", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "E^(t (-(G t) + I \[Omega])) == w^a /; a == (t (-(G t) + I \
\[Omega]))/Log[w]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "G"}], " ", "t"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]], 
                  "\[LongEqual]", 
                  SuperscriptBox["w", "a"]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"a", "\[LongEqual]", 
                    FractionBox[
                    RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "G"}], " ", "t"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}], 
                    RowBox[{"log", "(", "w", ")"}]]}]}, "RowDefault"], 
                   HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "E^(t (-(G t) + I \[Omega])) == z^(t (-(G t) + I \[Omega])) /; z == \
E"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "G"}], " ", "t"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]], 
                  "\[LongEqual]", 
                  SuperscriptBox["z", 
                   RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "G"}], " ", "t"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]]}], 
                HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"z", "\[LongEqual]", "\[ExponentialE]"}]}, 
                    "RowDefault"], HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "E^(t (-(G t) + I \[Omega])) == 1 + 2/(-1 + Coth[(t (-(G t) + I \
\[Omega]))/2])"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                SuperscriptBox["\[ExponentialE]", 
                 RowBox[{"t", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "G"}], " ", "t"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]], 
                "\[LongEqual]", 
                RowBox[{"1", "+", 
                  FractionBox["2", 
                   RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"coth", "(", 
                    RowBox[{
                    FractionBox["1", "2"], " ", "t", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "G"}], " ", "t"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}], 
                    ")"}]}]]}]}], HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "AlternativeRepresentations:MathematicalFunctionIdentityData__More"},\
 {}]}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"log", "(", "x", ")"}], "\" \"", 
                "\"is the natural logarithm\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement[
       "info", {"text" -> "coth(x) is the hyperbolic cotangent function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Coth.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Coth", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/HyperbolicCotangent.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"coth", "(", "x", ")"}], "\" \"", 
                "\"is the hyperbolic cotangent function\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Exp/27/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Series representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "SeriesRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "1000", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "E^(t (-(G t) + I \[Omega])) == Sum[(t (-(G t) + I \[Omega]))^k/k!, \
{k, 0, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                SuperscriptBox["\[ExponentialE]", 
                 RowBox[{"t", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "G"}], " ", "t"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]], 
                "\[LongEqual]", 
                RowBox[{
                  UnderoverscriptBox["\[Sum]", 
                   RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                  FractionBox[
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "G"}], " ", "t"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}], 
                    ")"}], "k"], 
                   RowBox[{"k", "!"}]]}]}], HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "E^(t (-(G t) + I \[Omega])) == Sum[BesselI[k, t (-(G t) + I \
\[Omega])], {k, -Infinity, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                SuperscriptBox["\[ExponentialE]", 
                 RowBox[{"t", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "G"}], " ", "t"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]], 
                "\[LongEqual]", 
                RowBox[{
                  UnderoverscriptBox["\[Sum]", 
                   RowBox[{"k", "=", 
                    RowBox[{"-", "\[Infinity]"}]}], "\[Infinity]"], 
                  TemplateBox[{"k", 
                    RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "G"}], " ", "t"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]}, 
                   "BesselI"]}]}], HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "E^(t (-(G t) + I \[Omega])) == Sum[((2 k + t (-(G t) + I \[Omega])) \
(t (-(G t) + I \[Omega]))^(-1 + 2 k))/(2 k)!, {k, 0, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                SuperscriptBox["\[ExponentialE]", 
                 RowBox[{"t", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "G"}], " ", "t"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]], 
                "\[LongEqual]", 
                RowBox[{
                  UnderoverscriptBox["\[Sum]", 
                   RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                  FractionBox[
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", 
                    RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "G"}], " ", "t"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}]}], 
                    ")"}], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "G"}], " ", "t"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Omega]"}]}], ")"}]}], 
                    ")"}], 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"2", " ", "k"}]}]]}], 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "k"}], ")"}], "!"}]]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "SeriesRepresentations:MathematicalFunctionIdentityData__More"}, \
{}]}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement["info", {"text" -> "n! is the factorial function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Factorial.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Factorial.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"n", "!"}], "\" \"", "\"is the factorial function\""},
                "RowDefault"], TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement[
       "info", {
        "text" -> 
         "I_n(z) is the modified Bessel function of the first kind"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/BesselI.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/Bessel-TypeFunctions/BesselI", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> 
           "http://mathworld.wolfram.com/ModifiedBesselFunctionoftheFirstKind.\
html", "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TemplateBox[{"n", "z"}, "BesselI"], "\" \"", 
                "\"is the modified Bessel function of the first kind\""}, 
               "RowDefault"], TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Exp/06/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Integral representation", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "IntegralRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "1100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "(1 + z)^a == (1/Gamma[-a]) (1/(2 Pi I)) Integrate[(Gamma[s] Gamma[-a \
- s])/z^s, {s, \[Gamma] - I Infinity, \[Gamma] + I Infinity}] /; 0 < \[Gamma] \
< -Re[a] && Abs[Arg[z]] < Pi"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  SuperscriptBox[
                   RowBox[{"(", 
                    RowBox[{"1", "+", "z"}], ")"}], "a"], "\[LongEqual]", 
                  FractionBox[
                   RowBox[{
                    SubsuperscriptBox["\[Integral]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Infinity]"}], "+",
                     "\[Gamma]"}], 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", "\[Infinity]"}], "+", 
                    "\[Gamma]"}]], 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TemplateBox[{"s"}, "Gamma"], " ", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", "a"}], "-", "s"}]}, "Gamma"]}], 
                    SuperscriptBox["z", "s"]], 
                    RowBox[{"\[DifferentialD]", "s"}]}]}], 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "\[Pi]", " ", "\[ImaginaryI]"}], ")"}], 
                    " ", 
                    TemplateBox[{
                    RowBox[{"-", "a"}]}, "Gamma"]}]]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{
                    RowBox[{"0", "<", "\[Gamma]", "<", 
                    RowBox[{"-", 
                    RowBox[{"Re", "(", "a", ")"}]}]}], 
                    StyleBox[
                    "\" and \"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    RowBox[{
                    TemplateBox[{
                    RowBox[{"arg", "(", "z", ")"}]}, "Abs"], "<", "\[Pi]"}]}, 
                    "RowDefault"], "\[NoBreak]", ")"}]}, "RowDefault"], 
                   HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["infos", {"count" -> "4"}, {
       XMLElement[
       "info", {"text" -> "\[CapitalGamma](x) is the gamma function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Gamma.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Gamma", "text" -> 
           "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/GammaFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TemplateBox[{"x"}, "Gamma"], "\" \"", 
                "\"is the gamma function\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement["info", {"text" -> "Re(z) is the real part of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Re.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Re", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/RealPart.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"Re", "(", "z", ")"}], "\" \"", 
                "\"is the real part of\"", "\" \"", "z"}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement["info", {"text" -> "arg(z) is the complex argument"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Arg.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Arg", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ComplexArgument.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"arg", "(", "z", ")"}], "\" \"", 
                "\"is the complex argument\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement["info", {"text" -> "abs(z) is the absolute value of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Abs.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Abs", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/AbsoluteValue.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TemplateBox[{"z"}, "Abs"], "\" \"", 
                "\"is the absolute value of\"", "\" \"", "z"}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, 
   Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
   Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
   Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
   Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
   Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
   Typeset`pod36$$, Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, 
   Typeset`pod40$$, Typeset`pod41$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux10$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux11$$ = {True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`aux39$$ = {
   True, False, {False}, True}, Typeset`aux40$$ = {
   True, False, {False}, True}, Typeset`aux41$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "11", "datatypes" -> 
     "MathematicalFunctionIdentity", "timedout" -> 
     "InterestingMultiDimensionalDefiniteIntegrals", "timedoutpods" -> "", 
     "timing" -> "3.993", "parsetiming" -> "0.665", "parsetimedout" -> 
     "false", "recalculate" -> 
     "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa658910gb4g2f5ch4fh6g000038253ef091c8da263030448796307962825", "id" -> 
     "MSPa659010gb4g2f5ch4fh6g0000428c553dd38293i9", "host" -> 
     "http://www3.wolframalpha.com", "server" -> "27", "related" -> 
     "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa659110gb4g2f5ch4fh6g00002fgc8e9afeieh6723030448796307962825", "version" -> 
     "2.6"}, {"success" -> "true", "error" -> "false", "numpods" -> "0", 
     "datatypes" -> "MathematicalFunctionIdentity", "timedout" -> 
     "InterestingMultiDimensionalDefiniteIntegrals", "timedoutpods" -> "", 
     "timing" -> "2.927", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "host" -> 
     "http://www3.wolframalpha.com", "server" -> "41", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2019, 6, 26, 19, 40, 11.423547`7.810375959014301}, "Line" -> 
    59, "SessionID" -> 21138297570623249948}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11}, Typeset`failedpods$$ = {12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
    37, 38, 39, 40, 41}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "E^(t (-G t + I \[Omega]))"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
         Typeset`pod41$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$, 
         Typeset`aux41$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{736., {674., 680.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
          Typeset`pod41$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$, 
          Typeset`aux41$$}, Typeset`chosen$$, Typeset`open$$, 
         Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa658910gb4g2f5ch4fh6g000038253ef091c8da263030448796307962825", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.7705848115267*^9},ExpressionUUID->"e8b05067-e753-4638-b312-857e846e604b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["e^(-Gt^2)*Sin(xt)*cos(wt)", "WolframAlphaLong",
 CellChangeTimes->{{3.770584916394314*^9, 3.770584929310769*^9}, {
  3.770584988835884*^9, 3.770585041170309*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"7654fe46-c3ff-484e-9622-48705f307e76"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "e^(-Gt^2)*Sin(xt)*cos(wt)", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Sin[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"sin", "(", "x", ")"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x], {x, -6.6, 6.6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max5769$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min5768$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5768$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5769$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2988923$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min5768$\
2988928$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max5769$2988929$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max5769$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min5768$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2988923$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5768$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5768$\
2988928$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5769$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max5769$\
2988929$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2988901[
                    
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Sin[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5768$$], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    
                    CalculateUtilities`GraphicsUtilities`Private`min5768$$], \
-6.5973445725385655`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5768$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max5769$$]], \

                    (Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min5768$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max5769$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5768$$ + 
                    0.013194689145077132`, 
                    CalculateUtilities`GraphicsUtilities`Private`max5769$$]], 
                    6.5973445725385655`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Ticks -> {{{(-2) Pi, (-2) Pi}, {-Pi, -Pi}, {0, 0}, {
                    Pi, Pi}, {2 Pi, 2 Pi}}, Automatic}, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min5768$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max5769$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2988901]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2988901[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2988901[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbim/f8N/gMQz0jYetgckoIMxaUBJynu9+\
JJauHawnW3wz4PPbpJm7SrFdICm9OFUX5rPd999d71nxzJK+71eT1+\
35oPkNL2Fp6fWDOUsl4Wg785yBVozKdJr+\
OyuNTGYfeDkB1Dvu2nNe6lmxPjzK3yf8KTgxMBXwzgzDPTkQJF8yhJde0aKndifTLhMCGc/\
4fn23u7u3taOh8FYRsQYUELvtIXMp4poSHsIdMOat5yIb/74pDx+\
KjiP4XsBIgH9yHrHilALIwXhmE/\
wrVebqfuYmCGCEkUvnSYnz2HbC7RRTGRjmOX4xsVkbbUFJirTnpsHJTfrFOTDv40PZOxi8h6XtDs7A\
sPCuGL0nZfVP+dugOfXbeGVPF1NHOb3hiNvxLAT0Mt0vmhdJ89I1bUu+jlXlzVfNhrkxVOm/\
l86Ytosh7HdNgyYHdsar9beMvzLtvAyx66fi/uhNZ+9owRcNRwqwX2UtODzKJopD7xE26erc+\
vwGPcqvmN0hlSwwolsnGW/\
uP54XIHXm0KMtZtsQDqingER5GBd1HG7zzJmhlOiSGKB59f1yyYbyzqUgDvb154JyuwA84SsW57QHK\
YLdScmmX75o+JWcjnXZMj7oTCQgVor+jtYH2XJFXQsAyOJ8YKmXoM5rJIaERUs+0EJEudEMIRkv+\
zHffMPFyuBVB0oVJfyLA5cac7Ck+\
iXBT4CkZlpc8cOHF3BbYvZRPK0Vl3E0nRx2myO6X6T6cYNzYEeSkJoScIHercpdJvCX90Ulvbgbk3o\
1oRuTejWhG5N+H/XBBcx/iv9BhWuuN4="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x], {x, -26, 26}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max5771$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min5770$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5770$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5771$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2989016$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min5770$\
2989017$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max5771$2989018$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max5771$$ = 
                    0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min5770$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2989016$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5770$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5770$\
2989017$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5771$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max5771$\
2989018$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2988996[
                    
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Sin[$CellContext`x], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5770$$], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min5770$$], \
-26.389378290154262`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5770$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max5771$$]], \

                    (Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min5770$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max5771$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5770$$ + 
                    0.052778756580308527`, 
                    CalculateUtilities`GraphicsUtilities`Private`max5771$$]], 
                    26.389378290154262`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min5770$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max5771$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2988996]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2988996[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2988996[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMxkCIfUACOhiTBpSkfK8XX1IL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcptfw9NCaoZzlshD03UmuQGsmRXoJn920JgazC5z8AOp9V615L9WM\
GH9+he8TnhScGPhqGGeGgZ7sKZJPWaJrz0ixI/\
uTCZcJ4ewnPN7eebmztfXCw2AsI2IMKKGftYXMp4poSHsIdMWat5yIb/74oDx+\
KjiP4XsBIgF9z3rHilALIwXhmE/\
wrRebqduYmCGCEkXPnSYnz2HbC7RRTGRjmOX4xtlkPW0LTFSmPTd3Sm7WKciHfx0fyNjF5D0uaXd2B\
IaFccHoOy2rf87dAM+v28IrebyaOMzvDUfeiGFHoJfpfNK6Tp6Rqmtd9HOuzmu+bDTIs6dM/\
b90wLRZDmO7bRgwO7Q1Xq29ZfjnbeFljl0/F/\
ddaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMiyMG6qON2l2XMDKdEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2U8X6k5MMv3yR8Wt5HKqyZD3fWEgA7VW9DewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpTqC7lWRy40pyEJ9EvC3wAIjPT5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DTpvuK4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigToExp[Sin[x]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
                 SuperscriptBox["\[ExponentialE]", 
                  RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "x"}]]}], "-", 
               RowBox[{
                 FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
                 SuperscriptBox["\[ExponentialE]", 
                  RowBox[{"\[ImaginaryI]", " ", "x"}]]}]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Roots", "scanner" -> "Reduce", "id" -> 
     "SymbolicSolution", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[Sin[x] == 0, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   TemplateBox[{",   ", "\",   \"", 
                    RowBox[{"x", "\[LongEqual]", 
                    TagBox[
                    RowBox[{"\[Pi]", " ", "n"}], Identity]}], 
                    RowBox[{"n", "\[Element]", 
                    TagBox["\[DoubleStruckCapitalZ]", 
                    Function[{}, Integers]]}]}, "RowWithSeparators"], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "SymbolicSolution__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "SymbolicSolution__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "Z is the set of integers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Integers.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Z.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalZ]", 
                 Function[{}, Integers]], "\" \"", 
                "\"is the set of integers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Properties as a real function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertiesAsARealFunction", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "4"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["minput", {}, {"FunctionDomain[Sin[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TagBox["\[DoubleStruckCapitalR]", 
                Function[{}, Reals]], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all real numbers\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Range"}, {
       XMLElement["minput", {}, {"FunctionRange[Sin[x], x, y]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"{\"", 
              RowBox[{"y", "\[Element]", 
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]]}], "\" : \"", 
              RowBox[{
                RowBox[{"-", "1"}], "\[LessEqual]", "y", "\[LessEqual]", 
                "1"}], "\"}\""}, "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Periodicity"}, {
       XMLElement["minput", {}, {"FunctionPeriod[Sin[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{"\"periodic in \"", "x", "\" with period \"", 
                  RowBox[{"2", " ", "\[Pi]"}]}, "RowDefault"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Parity"}, {
       XMLElement["minput", {}, {"Simplify[Sin[x] == -Sin[-x]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\"odd\"", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate forms", "input" -> 
         "PropertiesAsARealFunction__Approximate forms"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]], "\" \"", 
                "\"is the set of real numbers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Series expansion at x = 0", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAt `1`x=0.", "position" -> "600", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[Sin[x], {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{"x", "-", 
                    FractionBox[
                    SuperscriptBox["x", "3"], "6"], "+", 
                    FractionBox[
                    SuperscriptBox["x", "5"], "120"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "6"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 1, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "6"]}], ",", "0", ",", 
                    FractionBox["1", "120"]}], "}"}], ",", "1", ",", "6", ",",
                     "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "700", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[Sin[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "x"}]]], "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    RowBox[{"sin", "(", "x", ")"}], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"cos", "(", "x", ")"}], Identity]}], TraditionalForm]],
           "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"sin", "(", "x", ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{"-", 
                    RowBox[{"cos", "(", "x", ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Identities", "scanner" -> "FunctionProperties", "id" -> 
     "Identities", "position" -> "900", "error" -> "false", "numsubpods" -> 
     "8"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", 
               RowBox[{
                 RowBox[{"-", "\[ImaginaryI]"}], " ", 
                 RowBox[{"sinh", "(", 
                   RowBox[{"\[Pi]", "-", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}]}]}], 
             HoldForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", 
               RowBox[{"\[ImaginaryI]", " ", 
                 RowBox[{"sinh", "(", 
                   RowBox[{"\[Pi]", "+", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}]}]}], 
             HoldForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", 
               RowBox[{"\[ImaginaryI]", " ", 
                 RowBox[{"sinh", "(", 
                   RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}]}]}], 
             HoldForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", 
               RowBox[{
                 RowBox[{"-", "\[ImaginaryI]"}], " ", 
                 RowBox[{"sinh", "(", 
                   RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}]}]}], 
             HoldForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", 
               RowBox[{
                 RowBox[{"3", " ", 
                   RowBox[{"sin", "(", 
                    FractionBox["x", "3"], ")"}]}], "-", 
                 RowBox[{"4", " ", 
                   RowBox[{
                    SuperscriptBox["sin", "3"], "(", 
                    FractionBox["x", "3"], ")"}]}]}]}], HoldForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", 
               RowBox[{"2", " ", 
                 RowBox[{"cos", "(", 
                   FractionBox["x", "2"], ")"}], " ", 
                 RowBox[{"sin", "(", 
                   FractionBox["x", "2"], ")"}]}]}], HoldForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              TagBox[
               RowBox[{
                 RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", 
                 RowBox[{"\[ImaginaryI]", " ", 
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "m"], " ", 
                   RowBox[{"sinh", "(", 
                    RowBox[{
                    RowBox[{"m", " ", "\[Pi]"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}]}]}], 
               HoldForm], 
              StyleBox[
               TemplateBox[{"\"  for \"", 
                 TagBox[
                  TemplateBox[{
                    RowBox[{"m", "\[Element]", 
                    TagBox["\[DoubleStruckCapitalZ]", 
                    Function[{}, Integers]]}]}, "RowDefault"], HoldForm]}, 
                "RowDefault"], 
               GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", 
               RowBox[{
                 FractionBox["1", "2"], " ", 
                 RowBox[{"sec", "(", "b", ")"}], " ", 
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"sin", "(", 
                    RowBox[{"b", "-", "x"}], ")"}]}], "+", 
                    RowBox[{"sin", "(", 
                    RowBox[{"b", "+", "x"}], ")"}]}], ")"}]}]}], HoldForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement[
       "info", {"text" -> "sinh(x) is the hyperbolic sine function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Sinh.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Sinh", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/HyperbolicSine.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"sinh", "(", "x", ")"}], "\" \"", 
                "\"is the hyperbolic sine function\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement["info", {"text" -> "sec(x) is the secant function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Sec.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Sec", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Secant.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"sec", "(", "x", ")"}], "\" \"", 
                "\"is the secant function\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Global maxima", "scanner" -> "GlobalExtrema", "id" -> 
     "GlobalMaximum", "position" -> "1000", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Maximize[Sin[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"max", "\[NoBreak]", 
                    RowBox[{"{", 
                    TagBox[
                    RowBox[{"sin", "(", "x", ")"}], HoldForm], "}"}]}], 
                   "\[LongEqual]", "1"}], 
                 StyleBox["\" at \"", {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False], 
                 RowBox[{
                   TagBox["x", HoldForm], "\[LongEqual]", 
                   RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "n"}], "+", 
                    FractionBox["\[Pi]", "2"]}]}]}], "\"  \"", 
               StyleBox[
                TemplateBox[{"\"for integer \"", "n"}, "RowDefault"], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "GlobalMaximum__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "GlobalMaximum__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Global minima", "scanner" -> "GlobalExtrema", "id" -> 
     "GlobalMinimum", "position" -> "1100", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Minimize[Sin[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"min", "\[NoBreak]", 
                    RowBox[{"{", 
                    TagBox[
                    RowBox[{"sin", "(", "x", ")"}], HoldForm], "}"}]}], 
                   "\[LongEqual]", 
                   RowBox[{"-", "1"}]}], 
                 StyleBox["\" at \"", {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False], 
                 RowBox[{
                   TagBox["x", HoldForm], "\[LongEqual]", 
                   RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "n"}], "-", 
                    FractionBox["\[Pi]", "2"]}]}]}], "\"  \"", 
               StyleBox[
                TemplateBox[{"\"for integer \"", "n"}, "RowDefault"], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Minimize[Sin[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"min", "\[NoBreak]", 
                    RowBox[{"{", 
                    TagBox[
                    RowBox[{"sin", "(", "x", ")"}], HoldForm], "}"}]}], 
                   "\[LongEqual]", 
                   RowBox[{"-", "1"}]}], 
                 StyleBox["\" at \"", {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False], 
                 RowBox[{
                   TagBox["x", HoldForm], "\[LongEqual]", 
                   RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "n"}], "+", 
                    FractionBox[
                    RowBox[{"3", " ", "\[Pi]"}], "2"]}]}]}], "\"  \"", 
               StyleBox[
                TemplateBox[{"\"for integer \"", "n"}, "RowDefault"], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate forms", "input" -> 
         "GlobalMinimum__Approximate forms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "GlobalMinimum__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Alternative representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "AlternativeRepresentations:MathematicalFunctionIdentityData", 
     "position" -> "1200", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Sin[x] == Csc[x]^(-1)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", 
                FractionBox["1", 
                 RowBox[{"csc", "(", "x", ")"}]]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Sin[x] == Cos[Pi/2 - x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", 
                RowBox[{"cos", "(", 
                  RowBox[{
                    FractionBox["\[Pi]", "2"], "-", "x"}], ")"}]}], HoldForm],
              FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Sin[x] == -Cos[Pi/2 + x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", 
                RowBox[{"-", 
                  RowBox[{"cos", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "2"], "+", "x"}], ")"}]}]}], 
              HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "AlternativeRepresentations:MathematicalFunctionIdentityData__More"},\
 {}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "csc(x) is the cosecant function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Csc.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Csc", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Cosecant.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"csc", "(", "x", ")"}], "\" \"", 
                "\"is the cosecant function\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Sin/27/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod13$$ = XMLElement[
   "pod", {"title" -> "Series representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "SeriesRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "1300", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Sin[x] == Sum[((-1)^k x^(1 + 2 k))/(1 + 2 k)!, {k, 0, Infinity}]"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", 
                RowBox[{
                  UnderoverscriptBox["\[Sum]", 
                   RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                  FractionBox[
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox["x", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}]]}], 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], "!"}]]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Sin[x] \[Proportional] Sum[(-1)^k D[DiracDelta[x], {x, 2 k}], {k, 0, \
Infinity}]/HeavisideTheta[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"sin", "(", "x", ")"}], "\[Proportional]", 
                FractionBox[
                 RowBox[{
                   UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[PartialD]", 
                    RowBox[{"2", " ", "k"}]], 
                    TemplateBox[{
                    RowBox[{"x"}]}, "DiracDeltaSeq"]}], 
                    RowBox[{"\[PartialD]", 
                    SuperscriptBox["x", 
                    RowBox[{"2", " ", "k"}]]}], MultilineFunction -> 
                    None]}]}], 
                 TemplateBox[{
                   RowBox[{"x"}]}, "HeavisideThetaSeq"]]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Sin[x] == 2 Sum[(-1)^k BesselJ[1 + 2 k, x], {k, 0, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", 
                RowBox[{"2", " ", 
                  RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    TemplateBox[{
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], "x"}, "BesselJ"]}]}]}]}], 
              HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "SeriesRepresentations:MathematicalFunctionIdentityData__More"}, \
{}]}], 
     XMLElement["infos", {"count" -> "5"}, {
       XMLElement["info", {"text" -> "n! is the factorial function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Factorial.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Factorial.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"n", "!"}], "\" \"", "\"is the factorial function\""},
                "RowDefault"], TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement[
       "info", {"text" -> "\[Theta](x) is the Heaviside step function"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/HeavisideTheta.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/GeneralizedFunctions/UnitStep", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/HeavisideStepFunction.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TemplateBox[{
                  RowBox[{"x"}]}, "HeavisideThetaSeq"], "\" \"", 
                "\"is the Heaviside step function\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement[
       "info", {"text" -> "\[Delta](x) is the Dirac delta function"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/DiracDelta.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/GeneralizedFunctions/DiracDelta", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/DeltaFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TemplateBox[{
                  RowBox[{"x"}]}, "DiracDeltaSeq"], "\" \"", 
                "\"is the Dirac delta function\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement[
       "info", {"text" -> "J_n(z) is the Bessel function of the first kind"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/BesselJ.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/Bessel-TypeFunctions/BesselJ", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLElement[
         "link", {
          "url" -> 
           "http://mathworld.wolfram.com/BesselFunctionoftheFirstKind.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TemplateBox[{"n", "z"}, "BesselJ"], "\" \"", 
                "\"is the Bessel function of the first kind\""}, 
               "RowDefault"], TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Sin/06/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod14$$ = XMLElement[
   "pod", {"title" -> "Integral representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "IntegralRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "1400", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Sin[x] == x Integrate[Cos[t x], {t, 0, 1}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", 
                RowBox[{"x", 
                  RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "1"], 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"t", " ", "x"}], ")"}], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Sin[x] == ((-I/4) x Integrate[E^(s - x^2/(4 s))/s^(3/2), {s, (-I) \
Infinity + \[Gamma], I Infinity + \[Gamma]}])/Sqrt[Pi] /; \[Gamma] > 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", 
                  RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "x"}], 
                    RowBox[{"4", " ", 
                    SqrtBox["\[Pi]"]}]]}], 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Infinity]"}], "+",
                     "\[Gamma]"}], 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", "\[Infinity]"}], "+", 
                    "\[Gamma]"}]], 
                    RowBox[{
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"s", "-", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "/", 
                    RowBox[{"(", 
                    RowBox[{"4", " ", "s"}], ")"}]}]}]], 
                    SuperscriptBox["s", 
                    RowBox[{"3", "/", "2"}]]], 
                    RowBox[{"\[DifferentialD]", "s"}]}]}]}]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"\[Gamma]", ">", "0"}]}, "RowDefault"], 
                   HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Sin[x] == ((-I/2) Integrate[(2^(-1 + 2 s) x^(1 - 2 s) \
Gamma[s])/Gamma[3/2 - s], {s, (-I) Infinity + \[Gamma], I Infinity + \
\[Gamma]}])/Sqrt[Pi] /; 0 < \[Gamma] < 1 && x > 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", 
                  RowBox[{
                    RowBox[{"-", 
                    FractionBox["\[ImaginaryI]", 
                    RowBox[{"2", " ", 
                    SqrtBox["\[Pi]"]}]]}], 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Infinity]"}], "+",
                     "\[Gamma]"}], 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", "\[Infinity]"}], "+", 
                    "\[Gamma]"}]], 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["2", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"2", " ", "s"}]}]], " ", 
                    SuperscriptBox["x", 
                    RowBox[{"1", "-", 
                    RowBox[{"2", " ", "s"}]}]], " ", 
                    TemplateBox[{"s"}, "Gamma"]}], 
                    TemplateBox[{
                    RowBox[{
                    FractionBox["3", "2"], "-", "s"}]}, "Gamma"]], 
                    RowBox[{"\[DifferentialD]", "s"}]}]}]}]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{
                    RowBox[{"0", "<", "\[Gamma]", "<", "1"}], 
                    StyleBox[
                    "\" and \"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    RowBox[{"x", ">", "0"}]}, "RowDefault"], "\[NoBreak]", 
                    ")"}]}, "RowDefault"], HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement[
       "info", {"text" -> "\[CapitalGamma](x) is the gamma function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Gamma.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Gamma", "text" -> 
           "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/GammaFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TemplateBox[{"x"}, "Gamma"], "\" \"", 
                "\"is the gamma function\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Sin/07/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod15$$ = XMLElement[
   "pod", {"title" -> "Definite integral over a half-period", "scanner" -> 
     "InterestingDefiniteIntegrals", "id" -> 
     "DefiniteIntegralOverAHalfPeriod", "position" -> "1500", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[x], {x, 0, Pi}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "\[Pi]"], 
                 RowBox[{
                   RowBox[{"sin", "(", "x", ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", "2"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod16$$ = XMLElement[
   "pod", {"title" -> "Definite integral mean square", "scanner" -> 
     "InterestingDefiniteIntegrals", "id" -> "DefiniteIntegralMeanSquare", 
     "position" -> "1600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[x]^2/(2 Pi), {x, 0, 2 Pi}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  RowBox[{"2", " ", "\[Pi]"}]], 
                 RowBox[{
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "x", ")"}], 
                    RowBox[{"2", " ", "\[Pi]"}]], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["1", "2"], Identity], "\[LongEqual]", 
              TagBox["0.5`", Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod17$$ = XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "1700", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.08249027613378408, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.08249027613378408, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.08249027613378408, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.08249027613378408, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentLength$$ = 
                 0.08249027613378408, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.7853981633974483, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.08249027613378408, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.08249027613378408, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.08249027613378408, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.08249027613378408, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.08249027613378408, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {
                    "negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3034870$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$3034875$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$3034876$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$3034877$$ = 
                 False, CalculateScan`PlotterScanner`Private`fy1$3034878$$ = 
                 0, CalculateScan`PlotterScanner`Private`fy2$3034879$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$3034880$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$3034881$$ = 
                 False, CalculateScan`PlotterScanner`Private`ar$3034882$$ = 0,
                  CalculateScan`PlotterScanner`Private`tangentCount$3034883$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$\
3034884$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$\
3034885$$ = 0, CalculateScan`PlotterScanner`Private`tangentOpacity$3034886$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$3034887$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.08249027613378408, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.08249027613378408, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.08249027613378408, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.08249027613378408, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.08249027613378408, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.7853981633974483}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3034870$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$3034875$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$3034876$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$3034877$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$3034878$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$3034879$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$3034880$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$3034881$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$3034882$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$3034883$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$\
3034884$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
3034885$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
3034886$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$3034887$$\
, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`x}, 
                    Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    24.19026343264141/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    12.095131716320704`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    12.095131716320704`]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/Sin[$CellContext`x] == 0, 
                    CalculateScan`PlotterScanner`Private`X1$ < $CellContext`x < 
                    CalculateScan`PlotterScanner`Private`X2$], $CellContext`x,
                     Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[$CellContext`x, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = 
                    FullOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange]; CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    12.095131716320704`]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    12.095131716320704`], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 12.095131716320704`], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, -Sin[$CellContext`x]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, -Sin[$CellContext`x]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, -Sin[$CellContext`x]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]} + {-
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x], 1} (1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x]^2)/
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, -Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[$\
CellContext`x] == 0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[1/Sin[$CellContext`x] == 0, $CellContext`x, Reals],
                     1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[$CellContext`x, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[CalculateScan`PlotterScanner`Private`iLength (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)^(-1) 
                    CalculateScan`PlotterScanner`Private`involuteCount$$]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][$CellContext`\
x] == Sqrt[1 + D[
                    Sin[$CellContext`x], $CellContext`x]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]}], $CellContext`x], \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 12.095131716320704`]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x], 
                    1}], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 12.095131716320704`], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x], 
                    1}]], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x])) (1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x]^2)^(-1) {
                    1, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x])) (1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x]^2)^(-1) {
                    1, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]) + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x)) (1 + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x]^2)^(-1) {-
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x], 
                    1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]) + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x)) (1 + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x]^2)^(-1) {-
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x], 
                    1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x], 
                    1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x], 
                    1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]} + {(-2) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x] (
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]} + {(-2) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][$CellContext`x] (
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$]^2) (1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {Function[{$CellContext`x}, 
                    Cos[$CellContext`x]][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Sin[$CellContext`x]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {}, {0, 0, 2, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, 
                    Cos[$CellContext`x]], Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    RowBox[{"sin", "(", "x", ")"}], TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    If[
                    MatchQ[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    Graphics[
                    GraphicsComplex[
                    Blank[], {}], 
                    BlankSequence[]]], 
                    Text[
                    Style[
                    "(original curve is not real\[Hyphen]valued\n over the \
specified range\n of the independent variable)", Gray]], 
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, True,
                     "symmetric"}, {True, False}, ControlPlacement -> 3}, {{
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.08249027613378408, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.08249027613378408, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.08249027613378408, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.08249027613378408, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.08249027613378408, ""}, 0, 1.5393804002589986`,
                     ImageSize -> Small, ControlPlacement -> 60}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button["Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {
                    "negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                   Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTangents] = 
                    Uncompress[
                    "6:eJzNV7tz0zAYT9ryLDCwMLNwcCzJsXBsaUIO7pKQ1oGJIUospzoUybU\
k2vLPgz4/4sh2sGR3aAZdJH/\
6fQ99z9crfhF0O52OeKWXCWIbhTZ4OcIBYUQSziZEyOAICE70cqEoTsgf6+ULp/\
6YR1vR05shomtFkcTeGrHlnHIpcQT/GY6W84j81p+\
WyPcXmgdmUgRPMtAyCwHfvl2zH4gqLIJODaWnVhaUIPH30ILwqf4z4jvu3TLpaUo6whTdYj8hOU0tM\
kegOQvgSjPLHJU5PtJLCize2mIGo16i6AO9nFHEfrUC6xfBjv8v5xtb6JtaKd9ZQ00Ju0s0VC+\
btZp3KBgPZerDLyBSQohUkTleN+NyrghO3+WhXqbch/A1XR/Yi5fAl29Drpj/+SaMsBAaMLkJj+\
xhKd7byvbzU+/DWT+PiUS6OJg8iNYFoXLANloSA9/ajEE19DPQCLONvByjteSRiW7t5iv/qhr/\
OTwb8UmE13CIaEPxJ3l4z6kSjs54lL3tgmyxIH/\
1zzE4mkk9rUpKu103wxxy0cxRYoEIc75cIZVpnXbwrRQzLP3R9nLIia4BA+\
aPMlcTuV5DJPYr0vCSh8kOltme/\
miVxVf1k7kk55iBS9FxAT82nswhCzhHHHAacSefjzWHnDXTXQ6i5E/\
BpgQInO3Td7HPScNXc8sKrbLQfUhogDDn1zhyKMdJfqjNa7t6nXSIWGf+Q+\
ftbsehABBfg1wpD23xuVP5iq+NERV4v3VlOA+\
1QRjS27yNHysW55kq8WHnaVaJpxsPXUVgHsXkrRKf0XsXWDTRqVaBgxXEUOpeGMIcWqCPm1kMN9Amw\
cyGpAUx9Dx6FESKysPDkDkXFqeg+\
BCES5vUZhNRxaSRsTV7StIpmabUGVaYr9zdxZ8WkcIFk4BzTXWh0lNy/RQ5kDIiKyWLpP8A4+pdmw=\
="], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles]\
 = Uncompress[
                    "6:eJzNVktT2zAQzoNHKXDhwrkXpr0VpheOadIOBwJu0vYcOZaDporksSQ\
ev57uyo4T22EskTBDDjt6fN799Cna3U+\
hHMXtVqulTsFcEzEzZEYnAxozwTST4popHXcQsANmZDjN4B/AXEke/ZTpXF3CpE/\
41HCi6XhKxCTgUmua4ljQdBKk7B62JiSKbpWFMTHrs3TKqYoPFt7rsRTu3T6Iv4QbQLYakGMTOiCR+\
p/EAfgRBgNZRG/XoYc5dEA5eaJRBjnMpQkISiDiLi5uJlG3HnofTB5BfXZ1Hg++ZifeBfOdE/\
FvI2fn23R2UXXWcOgzV9ePjSy/OLsaMrFNb6SZm/Mxa8Tai+kvw2gu4B6YoYzwGa/\
5559gLDlPpBHRj8ckpUpBCsj28DbGVKtvrnymVMCq6oloRCLGMi+\
79mu1eE1obpYPq38nk9WN4pPfJATGnTpjnAXcqPKez3/DhvN5QD7Ou8UB2JyqdQcoNtkz/\
LzZnHuwYei8LNvKEhIJ5ANN35ZDZwsBL3wCLmXFy+iFqqr7OgnKkDcl+\
GLolel7ua5MsG6dhMVZqZcm3nnlk/RLx57ptnKzJXk3cmXP7FlJyiJ6pPpM4BfyoZ0Vyd/\
WgqynoYR7rxcZrJck/MnWj7wpeXUhKPVRlaRk+y4sfzcO/dkRDLD/\
JNoBfAwDaGuJ4S5o7BGHUP6gGW7uEXtapyw0ugr9D28ERDU="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii] = 
                    Uncompress[
                    "6:eJzNVktTwjAQ5uH7cfHi2YujN/\
XojAcEHQ8iFdQzod1CxpAwTSL463XTQkELNhGcsYedPL5++\
2WTbPaoI5phsVAoyEM094R3NelCuwYh5VRRwe+\
pVGHJANbQNDWDBL6F5k6w4FZEfXmFnSphvmZEQcsnvO0xoRREps0hansRfcOpNgmChoxhlHerNPIZN\
ElAabg98ZD1J81cY8hfCNMgw0IOsqU7Fkgj/\
3lgAdzBRk2k3otZ6O4YWgNG3iFIILvj8HjEhIGHZTO4fJjKWfebaMZe5Imtg7B2lqx6Hc01I/\
x1KbLzVZJdfCfLWfSxLfUoV+WpNVWd8lWykXxt1svMCCtOuo+awjiAG2jqIjDXec7pPzC+\
RH8gNA9uRoMIpMRUkMyZ3WiBkpe2epTQfs8TlCtZ4UEVOGJkwrUec8jZe1XtiUHSM+\
ZhinsiHRRbyoqd9FwOQuzA5ba4kKeqPKblP9VYTsNK+yDnhTWdpB/\
4Oas5d1BDDfnXsM0MGSGeGEL0txpKK3B44eIwDuvaL0+\
HW6pyTEWlBYfDbMxSVPGaHbPs1y1xSINJgH9IGNPEGOfJ5M0HwhaOL/\
f3TOnAYSXpMy1SzDvxYFHM7GHDFGxEWYD3sYF1INHMBm0Kqjq+E1g95hdUFaUi2tHqO/QT8dsTHw==\
"], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint] = 
                    Uncompress[
                    "6:eJztVjtPwzAQTksRj8LMzAQj7c4ARAikAlYLzHFSp7JwbeQHhV8P5yY\
FmhTFVghCggyns+7TffdUbj8Ww7QVBIHaAzHAfGLwhEQhSSmnmgo+\
oEqnbQvogBgaRjL4JogLwcbnQk7VMTzOMEsMw5qMEswjxITWRFqdExkhSZ/\
AFGkgIFxfcrApklgCJCjX6daCocynrO1mxu8xM0SlQQVyZGIHpA3/\
7tEBuA1KKN7ZW2VoN4eGhOEXMs4g3bw8CNsy8AxZv0ztMv0GiJxFHbgSPPeypNdBnDLMH+r46q/\
09XWUh66e0/CoMkwPZ6tzXo7TGm/pFDrdWRgRM6pgpK/\
wZY32ScarP0167xfyaTSwnpf3tXKhvRJrMrpPZUNiRuTHAM1npNnCfMcEeiWbUdRL0W/\
kCxtYeP7A3P2RdV9uat0p/F/P37Ce82PF/\
hivHY6aHVDs4Ya1A3gXFLgHsWEuaHtYXcEfBa7I6sPqRGtJY6OL0DcbrUfm"], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas] = 
                    Uncompress[
                    "6:eJzFVslOwzAQ7cK+\
XLhw5oLggqAXzkCLQGohUODcSeMgC9euvHT5ehg3aWhTpNgtiB5GTvzy5s14PJ2jUDzH5VKppA7RNI\
G/G3gnnTqJKaeaCt6kSscVC1hD82wYSeBbaO4Ei26F7KlLfLgB1jUMNGl3gXcCJrQm0q45kZ1A0gFu\
dSCKXmDMhAxAQigYqHh7yr3oSdm9xyF/A2aIiksFyLYJHZBW+\
GvfAbiDi7rIvJcXobsptE4YjEmUQHbTxARgE8Djqn25SoKqi4430aT86sSVOq6fJ/\
Guo7lmwD9WIrv4TbJanqwg6GNX6lGhylNnqhblv8kGxdqcw1wQVp4+PhlK0gRuoGmJyF7hH+r+\
wPoSvb4wPGqM+pIohdc/2bOn0SZanbnq6WfVW5kKeYEQHWfnGjCT3imfAnbPyHjGM+\
0Rf18X3r6mYflU57xI+ok/H7/V1WKsLZXPQAyJ/K+\
Qqf08p2XybkIUr80WtgetXxvwvOa5SpzP3CpUSfL8Oth86jxaTJLgrOJuQM3HIvT3ZNAY4J8mfrVMx\
6gud4SjPz3CrJ9O2msqjyfTxD2fDEvj3PxgG/mDw5yxhws7RYF2AO/\
jAoczMMwFbdW1sJHjSFc861xpLWlodB76BcuBCOg="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`getSplineSegments] = 
                    Uncompress[
                    "6:eJytVcly00AQlZNANrhwyZlLDvkA7uCFUGUTEQFnt6UeMZXxjJglhK+\
Hbo2tJJYrlirRoWuWN728XvR+Ya7FIEkSd0ZiCroMUOJ8hEJq6aXRU+\
m82GPAAYnroDDCj0hcGlVMjF26D7QZgsqDAo9ZDnqeKuM9Wl5rtPPUylu6mpfos0pJjRmWS9TeieO1\
6rYhx3dXf/RPUAGdSHYgs7DogGS/f1QdgCe0GJnG+qANPV1BR6jgLxYRcrriJQWOX8fDZ/\
DzwK7GaPeQxEq9O++qWcVgX5H4pEDfRFWvScxMwVndwsU7Vm6WlQm6GN9VFp2jioh3+\
8w4enfR1YHKOOnEwbp2UtpyffWJYLB2eXyXY/\
UgYbXLg0fxxUQiqKfP168l7zYqgN9cIhSuXk1AORQctmPYFxHRfJXBEr/1ZSJpO/+\
GnYz5HwZ7i324aZIyg6ql6D7ZGSrM/SP0fT9Pgs59k2GuZCpt9DgERx3QkPMdbnq51hCdESIS/\
bKZrF8f111hfV1VEcqNMlHcKTombku2d5DQHg6pCm5LSPIffbtR9VHPSmnImqIu/\
a8e1Mu9hux2aFwkny0S0I5/B1Cbdra5v9/uEib5a4d5yub4ZwG+A/htXXsCguqC5thmNJzoz7V7pn/\
03spF8JvQ/5sGx/A="]}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKf0aAT4gsSoxtj0oCSlO+\
9JU5i4drBdrbBnwef3STN2lWK6QBN6YdTfWke3z333PWeHosg6fd6PXXdmA+\
CxckWnp4YMxKzXBQ83j/LJVGKCp5cw2d3jAmJ3iMMfpDY+\
W4a817IGWh3foPvA4sKBpp81ZRRTYmaHkjIMxqp2jOW9MT8ZMpEBIz+JM+G28Od16+\
2HQzGMgatieRq2BYyzyQokvQQ6IYx7xjwb+74uDx+\
KhgLyfeC8Iioh8Y7kRAbGMGBYT7et15tpu5hYhp4DDK+\
dJqsPEdtL1BaUp5OyCzHNy4m60VbYJCpctzcL7lZpyAX/i18IEIbk/PYpO3ZEugXxhWj77ys/\
jl3Azy/bQsvxelq4jC/XYa8gaYnRC3T+bx1nRwjVdfa6OdcXdZ82WiQF0+Z+n/\
piCq9HMbLtmGQ2bGp8WrtLcPvtIUXOXb9XNwPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G34\
jtEp08FK5zAxFn2i+\
2PRxV4vSmEWLvpBqTD6xkQkJwYV2y53aMp1aMMJEQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmsNk\
oe6go+zLHxW3ksu5JkPeD7kmKZFrRX8b6yMNuTyeCM9IQrygqVdvDqukxiC9ZT8oQcIcOEVI+\
st87Df3cLESSNWBRHVJx+LAlubMP4l+\
WeAjwlOdNXdsz9Hl3baYTSBOa9UFNEkWp83mmO43mW7c0BzoviT4lsR/oHebQrcp/\
NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb3bmuF4="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`pod18$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution curve families", 
     "scanner" -> "Plotter", "id" -> 
     "DifferentialEquationSolutionCurveFamilies", "position" -> "1800", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                 CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                 CalculateScan`PlotterScanner`Private`SC$$ = 
                 True, $CellContext`sc1$$ = 0, $CellContext`sc1max$$ = 
                 Rational[1, 4] Pi, $CellContext`sc1min$$ = 
                 Rational[-1, 4] Pi, $CellContext`sc2$$ = ArcTan[
                   Rational[1, 2]], $CellContext`sc2max$$ = 
                 ArcTan[2], $CellContext`sc2min$$ = 
                 0, $CellContext`scColor1$$ = 
                 RGBColor[
                  0.24720000000000014`, 0.24, 0.6], $CellContext`scColor2$$ = 
                 RGBColor[
                  0.6, 0.24, 0.4428931686004542], $CellContext`scCount1$$ = 
                 12, $CellContext`scCount2$$ = 12, $CellContext`scTF1$$ = 
                 True, $CellContext`scTF2$$ = False, 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.7853981633974483, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sa$$], True, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sat$$], False, 
                    "show ticks"}, {True, False}}, {{
                    Hold[$CellContext`sc1$$], 0, 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc2$$], 
                    ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`SC$$], True, 
                    "show single curve"}, {True, False}}, {{
                    Hold[$CellContext`scTF1$$], True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor1$$], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc1min$$], Rational[-1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc1max$$], Rational[1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount1$$], 12, " curve count"}, 2, 60,
                     1}, {{
                    Hold[$CellContext`scTF2$$], False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor2$$], 
                    RGBColor[0.6, 0.24, 0.4428931686004542], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc2min$$], 0, 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc2max$$], 
                    ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount2$$], 12, " curve count"}, 2, 60,
                     1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], " | ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "  ", 
                    Manipulate`Place[11], "  ", 
                    Manipulate`Place[12]}], 
                    Row[{
                    Manipulate`Place[13], " | ", 
                    Manipulate`Place[14]}], 
                    Row[{
                    Manipulate`Place[15], "  ", 
                    Manipulate`Place[16], "  ", 
                    Manipulate`Place[17]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3087502$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$3087507$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$3087508$$ = 0, 
                 CalculateScan`PlotterScanner`Private`Sa$3087509$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sat$3087510$$ = 
                 False, $CellContext`sc1$3087511$$ = 
                 0, $CellContext`sc2$3087512$$ = 0, 
                 CalculateScan`PlotterScanner`Private`SC$3087513$$ = 
                 False, $CellContext`sc1min$3087514$$ = 
                 0, $CellContext`sc1max$3087515$$ = 
                 0, $CellContext`scCount1$3087516$$ = 
                 0, $CellContext`sc2min$3087517$$ = 
                 0, $CellContext`sc2max$3087518$$ = 
                 0, $CellContext`scCount2$3087519$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                    CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                    CalculateScan`PlotterScanner`Private`SC$$ = 
                    True, $CellContext`sc1$$ = 0, $CellContext`sc1max$$ = 
                    Rational[1, 4] Pi, $CellContext`sc1min$$ = 
                    Rational[-1, 4] Pi, $CellContext`sc2$$ = ArcTan[
                    Rational[1, 2]], $CellContext`sc2max$$ = 
                    ArcTan[2], $CellContext`sc2min$$ = 
                    0, $CellContext`scColor1$$ = 
                    RGBColor[
                    0.24720000000000014`, 0.24, 0.6], $CellContext`scColor2$$ = 
                    RGBColor[
                    0.6, 0.24, 0.4428931686004542], $CellContext`scCount1$$ = 
                    12, $CellContext`scCount2$$ = 12, $CellContext`scTF1$$ = 
                    True, $CellContext`scTF2$$ = False, 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.7853981633974483}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3087502$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$3087507$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$3087508$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sa$$, 
                    CalculateScan`PlotterScanner`Private`Sa$3087509$$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sat$$, 
                    CalculateScan`PlotterScanner`Private`Sat$3087510$$, 
                    False], 
                    Hold[$CellContext`sc1$$, $CellContext`sc1$3087511$$, 0], 
                    Hold[$CellContext`sc2$$, $CellContext`sc2$3087512$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`SC$$, 
                    CalculateScan`PlotterScanner`Private`SC$3087513$$, False], 
                    
                    Hold[$CellContext`sc1min$$, $CellContext`sc1min$3087514$$,
                     0], 
                    
                    Hold[$CellContext`sc1max$$, $CellContext`sc1max$3087515$$,
                     0], 
                    
                    Hold[$CellContext`scCount1$$, \
$CellContext`scCount1$3087516$$, 0], 
                    
                    Hold[$CellContext`sc2min$$, $CellContext`sc2min$3087517$$,
                     0], 
                    
                    Hold[$CellContext`sc2max$$, $CellContext`sc2max$3087518$$,
                     0], 
                    
                    Hold[$CellContext`scCount2$$, \
$CellContext`scCount2$3087519$$, 0]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`x}, 
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$,
                     CalculateScan`PlotterScanner`Private`curveParameterLists$\
, CalculateScan`PlotterScanner`Private`colorLists$, 
                    
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$}, 
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ = Flatten[
                    N[
                    Join[
                    If[
                    CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$}] -> 
                    Directive[Gray]}, {}], 
                    Table[
                    If[
                    Part[{$CellContext`scTF1$$, $CellContext`scTF2$$}, 
                    CalculateScan`PlotterScanner`Private`j] === True, 
                    Table[MapAt[Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}}, 
                    CalculateScan`PlotterScanner`Private`j, 1]] + (
                    CalculateScan`PlotterScanner`Private`i - 
                    1) (Part[{$CellContext`scCount1$$, \
$CellContext`scCount2$$}, CalculateScan`PlotterScanner`Private`j] - 1)^(-1) (
                    Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}}, 
                    CalculateScan`PlotterScanner`Private`j, 2]] - Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}}, 
                    CalculateScan`PlotterScanner`Private`j, 
                    1]])& , {$CellContext`sc1$$, $CellContext`sc2$$}, 
                    CalculateScan`PlotterScanner`Private`j] -> 
                    Part[{$CellContext`scColor1$$, $CellContext`scColor2$$}, 
                    CalculateScan`PlotterScanner`Private`j], {
                    CalculateScan`PlotterScanner`Private`i, 1, 
                    Part[{$CellContext`scCount1$$, $CellContext`scCount2$$}, 
                    CalculateScan`PlotterScanner`Private`j] - 1}], {}], {
                    CalculateScan`PlotterScanner`Private`j, 2}]]]]; 
                    If[CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ === {}, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = \
{}, {CalculateScan`PlotterScanner`Private`curveParameterLists$, 
                    CalculateScan`PlotterScanner`Private`colorLists$} = 
                    Transpose[
                    ReplaceAll[
                    Flatten[
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$], Rule -> List]]; 
                    CalculateScan`PlotterScanner`Private`x1L$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2L$ = 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    If[
                    CalculateScan`PlotterScanner`Private`x1$$ >= 0, 
                    CalculateScan`PlotterScanner`Private`x2$$ - 0.01, 
                    CalculateScan`PlotterScanner`Private`x2$$ + 0.01], 
                    CalculateScan`PlotterScanner`Private`x2$$]; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    4}}, {}, {0, 0, 6, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 3}, {16, 1, 3, 4}, {40, 1, 3, 
                    0, 0, 3, 0, 3}, {16, 2, 3, 5}, {13, 4, 5, 4}, {1}}, 
                    
                    Function[{$CellContext`x, $CellContext`C$3087488, \
$CellContext`C$3087489}, $CellContext`C$3087488 
                    Cos[$CellContext`x] + $CellContext`C$3087489 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x, 
                    Apply[Sequence, {0, 1}]], {$CellContext`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    5.497787143782138], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    5.497787143782138]}, PlotStyle -> 
                    Directive[Black, Thick]]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = 
                    FullOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    PlotRange]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    4}}, {}, {0, 0, 6, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 3}, {16, 1, 3, 4}, {40, 1, 3, 
                    0, 0, 3, 0, 3}, {16, 2, 3, 5}, {13, 4, 5, 4}, {1}}, 
                    
                    Function[{$CellContext`x, $CellContext`C$3087488, \
$CellContext`C$3087489}, $CellContext`C$3087488 
                    Cos[$CellContext`x] + $CellContext`C$3087489 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x, 
                    Apply[Sequence, {0, 1}]], {$CellContext`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    5.497787143782138], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    5.497787143782138]}, PlotStyle -> Directive[Black, Thick],
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$]; 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$ = ReplaceAll[
                    Apply[Hold, {
                    Map[
                    CalculateScan`PlotterScanner`Private`FED0[$CellContext`x, 
                    
                    Apply[Sequence, #]]& , 
                    CalculateScan`PlotterScanner`Private`curveParameterLists$]\
}], CalculateScan`PlotterScanner`Private`FED0 -> 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    4}}, {}, {0, 0, 6, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 3}, {16, 1, 3, 4}, {40, 1, 3, 
                    0, 0, 3, 0, 3}, {16, 2, 3, 5}, {13, 4, 5, 4}, {1}}, 
                    
                    Function[{$CellContext`x, $CellContext`C$3087488, \
$CellContext`C$3087489}, $CellContext`C$3087488 
                    Cos[$CellContext`x] + $CellContext`C$3087489 
                    Sin[$CellContext`x]], Evaluate]]; 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = 
                    Apply[
                    Function[
                    CalculateScan`PlotterScanner`Private`curveList$, 
                    Plot[
                    CalculateScan`PlotterScanner`Private`curveList$, \
{$CellContext`x, 
                    
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    5.497787143782138], 
                    
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    5.497787143782138]}, 
                    Evaluate[PlotStyle -> Map[Directive[#, 
                    AbsoluteThickness[1]]& , 
                    CalculateScan`PlotterScanner`Private`colorLists$], 
                    PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$]], {HoldAll}], 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$]; Null]; ReplaceAll[
                    Column[{
                    Grid[{{
                    Style["embedding function", 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[1] Cos[$CellContext`x] + C[2] Sin[$CellContext`x], C[
                    Pattern[CalculateScan`PlotterScanner`Private`i, 
                    Blank[]]] :> Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`i]]}, {
                    Style["embedding ODE", 
                    GrayLevel[0.3]], 
                    Part[
                    
                    Flatten[{$CellContext`y[$CellContext`x] + 
                    Derivative[2][$CellContext`y][$CellContext`x] == 0}], 
                    1]}}, Alignment -> Left], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Style["no curves to show", Gray], 
                    
                    Show[{CalculateScan`PlotterScanner`Private`\
embeddingCurvePlots$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}, 
                    PlotRange -> {
                    Automatic, CalculateScan`PlotterScanner`Private`pRY$}, 
                    ImageSize -> 360, ImagePadding -> 12, 
                    If[CalculateScan`PlotterScanner`Private`Sa$$, 
                    Apply[Sequence, {Axes -> True, AxesStyle -> Gray}], 
                    Apply[Sequence, {Axes -> False}]], 
                    If[CalculateScan`PlotterScanner`Private`Sat$$, 
                    Apply[Sequence, {Ticks -> True}], 
                    Apply[Sequence, {Ticks -> False}]]]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Apply[Sequence, {}], 
                    Grid[{{
                    Style["\[LongDash]", Bold, Black], 
                    Style["original function", 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[1] Cos[$CellContext`x] + C[2] Sin[$CellContext`x], {
                    C[1] -> 0, C[2] -> 1}]}, 
                    If[CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Style["\[LongDash]", Bold, Gray], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], 
                    RawBoxes["j"]], "\[Hyphen]values function"}], 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[1] Cos[$CellContext`x] + C[2] Sin[$CellContext`x], 
                    Apply[Rule, 
                    Transpose[{{
                    C[1], 
                    C[2]}, 
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$}]}], {1}]]}, 
                    Apply[Sequence, {}]], 
                    Apply[Sequence, 
                    DeleteCases[
                    Table[
                    If[
                    Part[{$CellContext`scTF1$$, $CellContext`scTF2$$}, 
                    CalculateScan`PlotterScanner`Private`j] === True, {
                    Style["\[LongDash]", Bold, 
                    
                    Part[{$CellContext`scColor1$$, $CellContext`scColor2$$}, 
                    CalculateScan`PlotterScanner`Private`j]], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j], 
                    "\[Hyphen]family"}], 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[1] Cos[$CellContext`x] + C[2] Sin[$CellContext`x], 
                    Apply[Rule, 
                    Transpose[{{
                    C[1], 
                    C[2]}, 
                    MapAt[Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j]& , 
                    
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$}], 
                    CalculateScan`PlotterScanner`Private`j]}], {1}]]}, {}], {
                    CalculateScan`PlotterScanner`Private`j, 2}], {}]]}, 
                    Alignment -> Left]]}, 
                    Dividers -> {
                    False, {
                    False, False, 
                    False}}], $CellContext`x -> $CellContext`x6530]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`Sa$$, True, 
                    "show axes"}, {True, False}, ControlPlacement -> 3}, {{
                    CalculateScan`PlotterScanner`Private`Sat$$, False, 
                    "show ticks"}, {True, False}, ControlPlacement -> 
                    4}, {{$CellContext`sc1$$, 0, 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    5}, {{$CellContext`sc2$$, 
                    ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    6}, {{CalculateScan`PlotterScanner`Private`SC$$, True, 
                    "show single curve"}, {True, False}, ControlPlacement -> 
                    7}, {{$CellContext`scTF1$$, True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}, 
                    ControlPlacement -> 8}, {{$CellContext`scColor1$$, 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    9}, {{$CellContext`sc1min$$, Rational[-1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    10}, {{$CellContext`sc1max$$, Rational[1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    11}, {{$CellContext`scCount1$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 
                    12}, {{$CellContext`scTF2$$, False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}, 
                    ControlPlacement -> 13}, {{$CellContext`scColor2$$, 
                    RGBColor[0.6, 0.24, 0.4428931686004542], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    14}, {{$CellContext`sc2min$$, 0, 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    15}, {{$CellContext`sc2max$$, 
                    ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    16}, {{$CellContext`scCount2$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 17}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], " | ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "  ", 
                    Manipulate`Place[11], "  ", 
                    Manipulate`Place[12]}], 
                    Row[{
                    Manipulate`Place[13], " | ", 
                    Manipulate`Place[14]}], 
                    Row[{
                    Manipulate`Place[15], "  ", 
                    Manipulate`Place[16], "  ", 
                    Manipulate`Place[17]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{MakeBoxes[$CellContext`x6530, 
                    Pattern[CalculateScan`PlotterScanner`Private`form$, 
                    Blank[]]] := "x"}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMBpsEfEACOhiTBpSkfK8XXxoL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcptfw9NCaoZzlshD03UmuQGsmRXoJn920JgazC5z8AOp9V615L9WM\
GH9+he8TnhScGPhqGGeGgZ7sKZJnLNG1Z6TYkf3JhMuEcPYTHm9vvXi+\
83LLw2AsI2IMKKG320LmmSIa0h4CXbHmLSfimz8+KI+fCs5j+\
F6ASEDfs96xItTCSEE45hN868Vm6jYmZoigRNFzp8nJc9j2Am0UE9MxzHJ842yynrYFJmqqPTd3Sm7\
WKciHfx0fyNjF5D0uaXd2BIaFccHoOy2rf87dAM+\
v28IrebyaOMzvDUfeiGFHoJfpfNK6Tp6Rqmtd9HOuzmu+bDTIs6dM/\
b90wLRZDuNZ2zBgdmhrvFp7y/A7beFljl0/F/\
ddaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMiyMG6qON2l02ZGWZEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2U8X6k5Mkn35o+JWcjnVZMj7vjAwBbVW9DewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpTqC7lWRy40pyEJ9EvC3wAYmqy5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DcwouJY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`pod19$$ = XMLElement[
   "pod", {"title" -> "Inverse iterations", "scanner" -> "Plotter", "id" -> 
     "InverseIterations", "position" -> "1900", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`iter$$ = 3, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`n$$ = 1, 
                 CalculateScan`PlotterScanner`Private`P$$ = {
                  10.511231641113017`, 9.139111654636302}, 
                 CalculateScan`PlotterScanner`Private`sf$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`iter$$], 3, 
                    "backward iterations"}, {1, 2, 3, 4}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`n$$], 1, 
                    "multivalued inverses"}, {1, 2, 3}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sf$$], False, 
                    "show frame"}, {True, False}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2], 
                    Manipulate`Place[3]}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[CalculateScan`PlotterScanner`Private`P$$], {
                    10.511231641113017`, 9.139111654636302}}}}, 
                 Typeset`size$$ = Automatic, Typeset`update$$ = 0, 
                 Typeset`initDone$$ = False, Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3768027$$ = 
                 False, CalculateScan`PlotterScanner`Private`iter$3768032$$ = 
                 0, CalculateScan`PlotterScanner`Private`n$3768033$$ = 0, 
                 CalculateScan`PlotterScanner`Private`sf$3768034$$ = False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`iter$$ = 3, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`n$$ = 1, 
                    CalculateScan`PlotterScanner`Private`P$$ = {
                    10.511231641113017`, 9.139111654636302}, 
                    CalculateScan`PlotterScanner`Private`sf$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3768027$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`iter$$, 
                    CalculateScan`PlotterScanner`Private`iter$3768032$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`n$$, 
                    CalculateScan`PlotterScanner`Private`n$3768033$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sf$$, 
                    CalculateScan`PlotterScanner`Private`sf$3768034$$, 
                    False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Quiet[
                    Graphics[{
                    Dynamic[{
                    AbsolutePointSize[1.5], 
                    RGBColor[0.237, 0.34, 0.575], 
                    Point[
                    Map[{
                    Re[#], 
                    Im[#]}& , 
                    Cases[
                    Flatten[
                    NestList[Union[
                    Flatten[
                    Map[
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`n}, {
                    Table[
                    Pi + 2 CalculateScan`PlotterScanner`Private`C1 Pi - 
                    ArcSin[CalculateScan`PlotterScanner`Private`y], {
                    CalculateScan`PlotterScanner`Private`C1, -
                    CalculateScan`PlotterScanner`Private`n, 
                    CalculateScan`PlotterScanner`Private`n}], 
                    Table[
                    2 CalculateScan`PlotterScanner`Private`C1 Pi + 
                    ArcSin[CalculateScan`PlotterScanner`Private`y], {
                    CalculateScan`PlotterScanner`Private`C1, -
                    CalculateScan`PlotterScanner`Private`n, 
                    CalculateScan`PlotterScanner`Private`n}]}][#, 
                    CalculateScan`PlotterScanner`Private`n$$]& , #]]]& , {
                    Dot[CalculateScan`PlotterScanner`Private`P$$, {1, I}]}, 
                    CalculateScan`PlotterScanner`Private`iter$$]], 
                    Blank[Complex]]]]}], {
                    Locator[
                    Dynamic[
                    CalculateScan`PlotterScanner`Private`P$$, (
                    CalculateScan`PlotterScanner`Private`P$$ = {
                    Max[
                    Min[
                    Part[#, 1], 
                    
                    Part[{{-17.303456003432245`, 
                    20.445048657022042`}, {-18.874252330227144`, 
                    18.874252330227144`}}, 1, 2]], 
                    
                    Part[{{-17.303456003432245`, 
                    20.445048657022042`}, {-18.874252330227144`, 
                    18.874252330227144`}}, 1, 1]], 
                    Max[
                    Min[
                    Part[#, 2], 
                    
                    Part[{{-17.303456003432245`, 
                    20.445048657022042`}, {-18.874252330227144`, 
                    18.874252330227144`}}, 2, 2]], 
                    
                    Part[{{-17.303456003432245`, 
                    20.445048657022042`}, {-18.874252330227144`, 
                    18.874252330227144`}}, 2, 1]]})& ]]}}, 
                    PlotRange -> {{-18.296837705023147`, 
                    21.438430358612944`}, {-19.867634031818046`, 
                    19.867634031818046`}}, ImageMargins -> 20, ImageSize -> 
                    240, 
                    If[
                    CalculateScan`PlotterScanner`Private`sf$$, Frame -> True, 
                    
                    Apply[Sequence, {}]]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`iter$$, 3, 
                    "backward iterations"}, {1, 2, 3, 4}, ControlType -> 
                    SetterBar, ControlPlacement -> 1}, {{
                    CalculateScan`PlotterScanner`Private`n$$, 1, 
                    "multivalued inverses"}, {1, 2, 3}, ControlType -> 
                    SetterBar, ControlPlacement -> 2}, {{
                    CalculateScan`PlotterScanner`Private`sf$$, False, 
                    "show frame"}, {True, False}, ControlPlacement -> 3}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2], 
                    Manipulate`Place[3]}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`P$$, {
                    10.511231641113017`, 9.139111654636302}}, ControlType -> 
                    None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMGEOML0hAB2PSgJKU7/\
XiS2rh2sF2tsGfB5/dJM3aVYrpAE3ph1N9aR7fPffc9R4dyijt93o9fdmaD5LT9BqeHlozlLNcFoK+\
O8kVaM2kSC/hs5vWxGB2gZMfQL3vqjXvpZoR48+\
v8H3Ck4ITA18N48ww0JM9RfIpS3TtGSl2ZH8y4TIhnP2Ex9s7L14+\
3drxMBjLiBgDSujttpD5VBENaQ+BrljzlhPxzR8flMdPBecxfC9AJKDvWe9YEWphpCAc8wm+\
9WIzdRsTM0RQoui50+TkOWx7gTaKiWwMsxzfOJusrbbARGXac3On5Gadgnz41/\
GBjF1M3uOSdmdHYFgYF4y+07L659wN8Py6LbySx6uJw/zecOSNGHYEepnOJ63r5BmputZFP+\
fqvObLRoM8e8rU/0sHTJvlMJ61DQNmh7bGq7W3DP+\
8LbzMsevn4r5rzWfvKAFXDYdKcB8lLfg8imbKAy/R9unq3Do8xq2K7xidIRWscCIbZ9kvrj/uV+\
D1phBj7SYbkI6oZ0AEOVgXddzusoyZ4ZQokljg+XX9ssnGsg4l4M72tWeCMjvAPCHrlic0++\
lC3YlJpl/+qLiVXE41GfK+LwxkoNaK/gbWR1lyBR3LwEhivKCp12AOq6RGRAXLflCCxDkRDCHZL/\
tx3/zDxUogVXsK1aU8iwNXmpPwJPplgQ9AZGba3LEDR1dw22I2kTyuVRexNF2cNptjut9kunFDc6CH\
khBakvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AUZquJ4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False, False, False, False}, True}, 
   Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {
   True, False, {False, False, False, False, False, False, False, False}, 
    True}, Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False, False}, True}, Typeset`aux12$$ = {
   True, False, {False, False, False}, True}, Typeset`aux13$$ = {
   True, False, {False, False, False}, True}, Typeset`aux14$$ = {
   True, False, {False, False, False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "Sin", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "Function", "desc" -> "a math function", "input" -> 
          "*C.Sin-_*Function-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "MathWorld", "desc" -> 
          " referring to a mathematical definition", "input" -> 
          "*C.Sin-_*MathWorld-"}, {}]}]}], 
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "Sin", "score" -> "0.12", "level" -> "low"}, {}]}]}, 
   Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "19", "datatypes" -> 
    "MathematicalFunctionIdentity", "timedout" -> "", "timedoutpods" -> "", 
    "timing" -> "7.126", "parsetiming" -> "0.11800000000000001", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSPa120161i11hh5419i1bh1h00004gd73dhge8ga3404", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "50", "related" -> "", 
    "version" -> "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2019, 6, 26, 19, 44, 9.615202`7.735533399207272}, "Line" -> 64,
     "SessionID" -> 21138297570623249948}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "e^(-Gt^2)*Sin(xt)*cos(wt)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$}, Typeset`chosen$$,
         Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{736., {2098., 2104.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.7705850496990843`*^9},ExpressionUUID->"95531f01-3e1d-4429-96b6-\
652b8fb820dd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{
     RowBox[{"-", "G"}], "*", 
     RowBox[{"t", "^", "2"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.770586505831518*^9, 3.7705865421215076`*^9}, {
  3.770586596795724*^9, 3.770586602131853*^9}, {3.770586986602892*^9, 
  3.7705869927779016`*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"dd1c43ab-50e0-4bb9-bf76-fdf8a0799921"],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    SqrtBox["\[Pi]"], 
    SqrtBox["G"]], ",", 
   RowBox[{
    RowBox[{"Re", "[", "G", "]"}], ">", "0"}]}], "]"}]], "Output",
 CellChangeTimes->{3.770586545476707*^9, 3.7705866172423763`*^9, 
  3.7705870149385147`*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"e8f51b97-bf07-420c-b11d-95f893e151ff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"Cosh", "[", 
        RowBox[{"2", " ", "\[Pi]", " ", "\[Omega]"}], "]"}], "+", 
       RowBox[{"Sinh", "[", 
        RowBox[{"2", " ", "\[Pi]", " ", "\[Omega]"}], "]"}]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Cosh", "[", 
        RowBox[{
         FractionBox["1", "4"], " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"]}], 
        "]"}], "-", 
       RowBox[{"Sinh", "[", 
        RowBox[{
         FractionBox["1", "4"], " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", "\[Pi]"}], "+", "\[Omega]"}], ")"}], "2"]}], 
        "]"}]}], ")"}]}], 
    RowBox[{"2", " ", 
     SqrtBox["2"]}]], ",", 
   RowBox[{"{", 
    RowBox[{"\[Omega]", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.770588107996991*^9, 3.7705881124555063`*^9}, {
  3.770588166207335*^9, 3.770588215494822*^9}, {3.77058827266574*^9, 
  3.770588280324539*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"883cba17-2bf6-4281-8eea-880e800439ae"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJxFzlsogwEABeDfkOVhycot7BZSSCut5VoeEKaWu0TEA0LGLy1yedGiGNGm
SWiuRSJrpQ1J5hJNLmFIjbTcFzJmSv85dTp9b4dTUiMuoxEEEe7o3zbfpr/Y
7Tw98R+z1Mt6ZoNFHpfvy58wW1j7XfMKr8nk9CszTI84DtTvwv31xamtQ/CM
k2ScEMCuZUl830IuZebJRtVoL4eyeF1ZGmpgU5Y+xlb13LAoaxqVFXMZgfgr
z2L/KPwpJ6lWRMkWP8pP3ec2FzOsbPmaXr2ELUVCt2gjLOcu6cK1sGliNpLZ
CZMLQ54mHswe0+qVAfBW32l1jjfs3+C9ve8Orwn6OtaffSkzVmRvkzpYvdl0
JCmAFXwycSoT7lLVzZvS4TpJpSwlAY5lFcaxguBDMkFtePChvHkdwyTuYG2a
sDXqGh7h8vNHjHDlHo9BamBasBvJaYetPc432VL47sue0VUP7x18hL6Xw6sx
1oGwYnhx4tm5JA9Wez7UDophRfP9xU4qzNDlWtocDrGMv1ydDsf/AiDyue8=

       "]], LineBox[CompressedData["
1:eJxF2Xkw198XMPDP5mPNlkpKdolIWbN0PlkjZEuo7GRLsmWXJdlT9sqaFpIl
klTuOyEiEilZsmVP9t3H831mnufn/HPmNXPnzDl37tyZO5fP5pqhPQGHwxXj
cbj/m9tDZQ+ECtFjh6fz5we6s0DUV2HbLZ8O25snmJ7V8wCwPj3R4VQ6bJnW
nsch8QGYqNqevxBNh8UkDD1rV38AYcxxz8GNDiu9zCF89+V96M7vu8AqT4c9
4bzomZ6UAVHtN0vLmmkxp7+mu7c80uCQXEqPUA0tFmHkupF2PA0qHhaQ75fS
YnQCzy0bZ1Nh4Mq3S2EptFhtCM/aH/dUkKMK0BtZ0mItFU831m+kwKjoJ+vF
eTJ2bf3Ang85SRCY2BPn+IeMTbWc7tZwTAL25X+ve3+QsVeRxzKNJJPg1AdO
5vp3ZOwmDSmB+uEepFxwrk6JJGOtdI93hU7dBbWIXbvluMjY4BCWdN0kEXL7
jOr8TtNgVwuVqJ8YY+HEyIn1Tmka7N/N5YDHNTFQN8kmKSlCg1HSpv4qe8TA
6Erbg1FmGmxabEb/fk80iLLreBr1krA9nTUVPZVR8FJDjV/8Bglj2ZjsMUuI
BFVdAdMoZxJ2MJfYq6kTCZ1GhIThyySsUGW7t4chEpatsLUMNRLWdunOl9no
W6AYoNROZidhsT8rVZ7fiYC6EumbA0VE7JKecIpuVRicr9xdqZhDxFh/1LmQ
b4bB6Lv5qdQkImaKe5JpcCYM6D6XXtD1J2JvKs+Y3/8VCrojR49VaxKxm7Qh
oZ00odDFKdSfNETAqO5tGt+nguEKD4nj33cCFmzCqhEUFwyrQsNa2k0EbJv8
LFFIIhi4pHJf4UoJmIn1p/NuXkFgocsdfzWIgDnblrjmMwXCWOgeJU1OAnaI
A3+02ckPGIJK/iUxEDDhGF3yF3Y/kPDVejSwicd6CYftOt/5go9bEIP/IB4r
YedOmdjtC+SLf34WFeKxxR/RouNffEBQ+pU3uzIeOxrWuLj3mhecOXbuiOUx
PDaRqG199rAXuIpO9D7nw2MvkxcnLAY8oYKXW02djMf0mYa0uM57guquW+y+
bThMmjWSmH/GA2xGjUv6rHHYGxlTHI+JO0QOztiIGuMw76ZMTjjgDoW9UXtv
aOCwUfbRo/K112D+27sgVjEchjheR9P3uwEhRCs9cnwbbb9JryoXvgpwfKLd
YNc2Kk4t4GxbdYLIw9wnp+aoqDyeSOpLd4JWboOciC4qchExcBBRcAILhjdu
r7OpqGmvWZzTTUcIHI5i5D5BRfseSs9KH7gC1Ski6uMmW6hAbK8uzW07oLs4
ZotX2kK+Jb133yvYgQnvkzAuvi00uc4o6P3PFuYLBTCdqU301hmKui7awhHs
kGJZyCZqaB47yEGxgfRJjuP+zzbQK/4xWQ5pKxgt6TiXFL+Bzg399ZqctgRp
73tuRR4bqF6ootHY0xLatlmK+pU2kHadsC/zLQsg72E8rNq+jsSktG/Fv70E
3oDnZlpfQ/P2an6Z7mZQS8IUhX6voVPWU43PdpkB6+dg81N1a8jT+tMp9iJT
KDLeTHNPWEP/vrzOmZm+ACNOK+zf+ddQQwN3pWmwCRgm/6XLOruKguXY37v3
GkGOWdHh15KraOZg5ZxPvBHMHHLR+LpnFa0zXBN8CEYQUzAeThhYQScW2Q7J
PDWEDzXDVAevFdRaxfHqVLgBSE50Lx7LXEaqh7hxXj/0wGtW/Mi+iGXEYcfJ
HmqjB1UroZepzsuo9Vr0CaF/unCaLNrQIr+MmnlrZw/t0gVDAf80p84l1E/P
6mVw8Sx4X+ZSeMS4hLq6HoXlK52Bajs3t5j5RSRacNh8pl8TqC61ede7F5Fy
dqlcZJgmRPo7M1KeLqLIPuzKnS8akJ5W3dursojuJtl9SfFQh+p285C9/gso
4yljCt2SClB/FpdvWS2gj/ma/hcKVUBlgDA+ormA6H3q/lVaqUDzTKF++Z4F
REz8kpXx9TT0Mm7w6ZfNI6mxPJTwjgLb6g/qosfn0HdV2uTqCGVQ0/236t42
h6RciwXPMStDlLGquGnlHKoJduLPylACVtupFOGIOdSZUChv/EoR+G8qXvnI
M4eMM1zMw3AKoFbdQ79lMovc+goCjwzKQnHh45OfFGfR8MXpAFKgLHA+uOZ0
l3cWUaTc58M4ZaFrhXzvbOc/VLw7fcrARAaEAkxYM9dnUN+wBfO9ESlYvTh5
7XjdDOp4dld6KFYKWpSC2+rjZxB5zvTIU2kp8KI+TpjhnUEayR6ZfjEnoDZ0
iYmi+Re5nrLJfK5xHFJtol07Wf+i67cOZjOtSYKTKneL469pFCeO4qqKJIGV
Rj327tVp1MDlcKdvnyRYRiXTDydNoSgVAYMXa+KwmSBFjhyYQL4pN/UObRyB
r9c+2XMVTiBw3yU5GXEEHulfrC/2nECXpmQn3rMeAW328Igf5An0WKUh67KE
CGSkfCMcER9H0zlfbxXcFAZXHweb98tjKIuQVdu/XxgoF9Y/GGBjqOnMC8mB
CiEY5+QP9TcaQzSpCl1is4Ig+/D6drPfKDJKzQg/EiDw331IY2mlOoqqNVgb
CPwC0Hc5o2aRaRQpW9Ge8fzMDxE8H4K4c/4g9F7TDc/LDx15rJtuDSMob2xQ
WayPF9wLSlbZdg+j4xr1++7KcIMks1u4ysAQskfcj8PeHIQ5j6PMni+G0DlJ
Ra1cOAgeSgUCnZpDSKAv84OG4QHwbsvTSw0cRDErZ+9bJu4HWWnr7gatQdRS
3yQwKrgfltN57Fb2DqI4Ztsii7eccMPmoZ9p2QCiF4g3Y5jZBwuTYloyLb+R
Wgp74T2nveBV8cwi1eE3OmpfNjTDtBeWg4S8VnC/0dNEu6P0L/fAKitP9huZ
fpTGQF63xO+BTVn2JeXsXtS4QHFaLN8N5PDVHA2PbkTTN2a2bssGt3W8K58y
dSPWVXG2TF42oNs730z39CfqDv6sU9DPCgwFU8ufe36gWqFa92kLVmBp69c5
p96FSJ6f2LV/M0Ni+kWb0t/f0WiX808ZN2Zgt/l5g83/O7qX/yCxbHsXcCy1
53UUd6KGK+dCFUR3AeeB+tULnB2o5KwJ7aeHjJAxcpr5zctviIfXYcgeGIGr
uEaAS/cbEjTVOXJphAG4T1fp9Ya2oz3EaCQjwwCqrSZaH7raUPHVwVeLc3Sg
Ya3vFc7Yhu6sBqQ8fkIHZxa1stUprQjHOKIXcpkOdLiUl5oKWlDf1ywsvZ0W
TBwEcr8FNiGRvItXer+RIea6Z9S9V43I+P09tqsZZHgf+PGa4cwnpB/MbvfX
mgyCSbanvlk2oJOMVm0vVmnANKtc6F56PRrR2P402kADsQXEXYbtdciuJG0V
l0YD8+hRT7vKR4QfObberEQDws0LtXcDatG8HLXAh50GzLpUCw0qPqBQubyj
yxMkwKaHfduFMBT862mzYxYJxv9dwfjf16BCE9dikwASnCPT3cmTeI+YKjzo
WcxJcEjqzNE8tmqk5GXN2HWQBLe0xtf5wqsQzlAxdABHgmnLqKbcxUp0iZNr
sWiUCEY+Iul8Dq/QnjWVvJOtRKiOa3TI/VGO8ljTOyNeE4HvkaMMn9ZLlBYc
Q4jPI0LUGzpSbnUpyhl+kK9/hwj92QaPT5sWI++hoeDWICK8aLmrclrxOeoQ
HlWlcSNCwFr7b8qhZ+jEwPDEgiURtITZgyj4x4g+iz8ww4gI+4wMuSgjuSgs
N55r6QwRmrcFr4UkZKLFN/lEMoUIjmaPC4KN0xAt3i+7WZ4IpHKhkSCuu6hq
/YGLuhQRKPt1lNexW4hoVbPucYwIs+kZdnMZHsgja5DXWJwIgYTkeg15MwA0
+3L8KBEk7tt+4pANAV/SrQeSEv/1v79shpElDs76G4+KHf9vP6R+vos8nQxy
fhpbv2SIUNl9Iex2wH24a5s4qaxEhF3YlECdeQ4sZzFePa9GBEh6Hll34xE0
9NG85dMjwnUHl4m65CdQl1/77ZEZEfJOiunUlxWAkmmPQ68DETqZporrW4ug
sP2wXos3EcgDhWwNUyVgYbIV4RVJhIdmMgq2EWUQfdHMpyudCDKqKS7D7OXw
z/y0/EIREVqPLj20za0AU3IzR0stEXC4V9u2Na/B0XSqt2qBCBkTHMdHdN6A
iC38aWMmwYkOLxu7nmpw9/E8WChGArsn0vV2q+/hxWvQKHEmwdad5OWRSASX
i7Zq+uNI0Ky0nvQyBoPs24/nu0v/Wy9sXn9ify2QYpRVlKkkkDzA0O8xUAut
XX8+FB6mgS2W6uWXTz/CCO9E3owhDaSu7ReRkq0H/bxBEZoSGvjU0h0jZdQI
4/ECvY1BZHD0/fXpolgTTC6zpQm+JQOdYA8pgvgZzlYEZ3xeJ4N2QG9wZ3kz
qAWT6OhDaWFSuO/tZmwL9J5X+P38Ey3EfutbFbT7Au/fcTYXs9JBy5HfHt4c
bZC7pO07WUAHrt9/l2ROtwGzSYLbsXU6iKS4L9vYfIWhVI7waR16ODztLhWr
0A768RraE2v04Kjq8aJn8hvcbGyKK/VgBPmM+eZ/Jh2wrbkp5/uDEej+eUwS
P3aAroeA4PwpJii473n46INOcDHKt+Leuwsm57xyA892wUOOYnsYZYZqzSWU
+LoLBMZXRSKtWSAm07s/X+AHaLZtC3z6zQJiWj4Hvmz8gCsa2qdfeLCCa86N
FO6ibrhz1tFzKYYNlJZXyo9z/gKZ+uAUxu9swKTj+0094hd0/NLk+czLDi9W
fFncLvWAMCley+A9O8zo+UfXMPXB9KS4z0lGDqjJX3/6zbcP1k5575Kw5YCE
df+G0ZE+4Nb01th6xwHHngQQWd73g+cIPcNpnz1QFVxTUyI7AP2Ws6G8uH2Q
U0D98sZ1AC6zH5DNubIPojpP9X3MG4D4Y3Hsx9v3gako2vjBPAhvrUfuFxdy
wtp3JI8bG4Sjx0KZBm9wgYL4h5f6acNwJWThbW/YIZDp7EqtaRoG5xPbzxjI
PCAZMO1/dHP4v36d+n1jeUC4aZ8qnfUIVJfwWZbq8cJue7cOJPoHBOy8D9Fc
4wNmpojX4pf/wGGZyaty1XzAUJ7x4MGdP/Dw65EP5WR+wOHrbW8s/gGZaZHp
mEf8MP3wwKJEzShcLKLO+PwVgDHV4z8fzo7CcAZRM0BVEIYmNd4xCIyBhMTj
c333BaFb3iNi9PYYzD/3YaXTE4KGzkaOLINx8Loc+zqhQRiymXxkdv2ZgFDF
OEkqSRTul8fuD9g3CY8X66aSvUQh1Tx3a1xrEuT0eTe+/xGFuGct9XXFk+CS
zFPF2CoGvmoCJoG+U8ArrJ/B+kocPKfkFSYLp8BQuf1Ah5QEuN3TO2TaNwWe
emMOThUSYD/gNyqlMg3izf7G82+PgWHgV58pxr/gxeXxVHZeEnQFRs3NTv0F
/MnGw39OHocznzdOfXL/C7Z5cjWdYcfhFOdh2kff/0I1935B6r4TIFYRlGae
PQO5SMKxQF8KCD57eu32z8JfApfLXaoMmFsVfquSnoXPQuflT9rIwkttaGLS
nwU/jWgy6ydZsOFxqqyInIVSzg4nlCoHtY3vEkmLs+A6O3CRR/skcJUb3DZl
mQPR0PIjyW9PgkfmaFCR6ByMG9Na6x1TAH4PVhdj6zl4Nqj+huuAIoQfsFPP
b50DziHWe88YlKGXZk1xdWIOfr156H07VhmkZ+NP6NDMgwAfY1wN8ykYqXvN
s6g4D/aEsA7BAwBqbozrqgXz/50DQrbZUwqQPrwsHg5fgEtRne8esavCpeea
j+WyF4Dr/mQD0V4VKlJ6H8RWLwCP+KS1brUq2DmTo6XmFmA9/tyCiIMa1O82
tw23WIS4Q9bKjV/V4RB1xuyH3yLc1NP5PCOuAT7j4fpiKYsgoqE0pRuvAcLv
Xyh3NC+C9eC57YuG/70vHPCcAieXwNn460b/+Bno109lvmG8BC7CA1Ndxlog
qyhG03xtCbImGktDPmjBKMv5eY8nS8BfmD3qm6ENGm+etdTuXgZpAt1dVkcd
oGXSD7WZWYZDEZn5asf1wfSwOSZLvwJjlzqXmNz1oVDFbptBcAVqogM6f5bo
g56fb1C52QqwPjB0FaUYQOpojh+pfgWiKI79suaGIPxh7vqTB6vw/q707elm
Y/Dt3Sj1r1wFs56IV9UC5+HzCs2sXvsqaEfmykf4nQc3CS63FfIa3Atrb6zk
NoHKByrOZzzWIFFL501s+gVQ90mymTyzDsujST9jE80h9W5mbo3tOrQkD9Jo
bZvDeNHTgXvB66BrUaAcbXwR4obfWihWrEPY1PXd6ScvQaf+iHkczwbsPnPH
v2KPBQi7zmRYKWxAg/wXwl4HC/C9vfpT+vwGGDCvlRlLWMLnPAInvfsGfGz5
HP3I2xIO1jBd6IvZgB8tEk7dFZbg1r03tezxBgRUOMieVrYCbJH3+y1sA9wE
LHKiTayAnVWMw7xnA+pS13+7VVmBnZiMkcTyBlQrVSjezrWCSg24R2DbBNeB
A9LCotZAZ6PV3iW2CbgwD9tXMdZgHmTE+lxjE2o5NT1/37GGovTL50KsN0Fb
qnZE+K81UMuvJBgFboLxY1Gj89o2oN92/cvhtE2wrEoOOvXUBvImA5g2yzYh
iuVlUWSaDSzSRJ792rIJiZ3Y8YYZG9DgS4zJH9uE7q2rHQtqtpCudL/Jl7AF
65n9vO0ZtqDkWazJJ78FDsnnB6JO2UFCQlXkkuEWyJlFeXyJt4OBgtr6pqtb
gM/+fS7llx2cqG8hZUVtgXkvo/BtQXsIH+hS9Xi0BcxrTKdVXeyh/83Zq77v
tmCcwG3BkG0PCklYavD3LXATDTXxa7WHFFcZLGJmC44c7fgmuGYPs+qFEzG0
VNA3CplV++4AOjw8u+/yUuFVFxuvzSkHeLqapJR2kgpmugHjctxXgPCNziHT
kAp8ctJMDSRHsHgedOeRCxUcBPDn3M5egeqI+aqCCCrcmQ9wa5Z2hD0WV4ZK
Mqmg3cBrq33YCdzlehkrK6kwPGkyaqTuCC2sBjLv2qiQ5vM9zFfeCUQm6y1q
x6mQKmo9zSvjDOEfFaIa8dvAkETDbSfgBP0PS8paubaBxvHRZiqdEyj4CPZ0
Sm3DVJB8vSXRGVLPZZB6dLYBExi6z9XjBHMizBKD9ttQarJqxNvvDDqE8Atj
wdsQLKo7c2bKBZ71rNz8m7YNL/MNl9YIV4H0yrVwoXQb1JhKyERHF7BMGOxY
a9qGopM5W4n+rlB9xWRre2gb7A6/utaXdhX2nm4WJm9uQ9+AxLYR5gbyu3hF
IhlwlDpNwxvmta4w6vdLiX4fjhKpf3+/z9BVSB5NNogTwFHWO/ZSf+y6BipG
5xxYJHGUBImcWF9+d5hF9AH3lHCUgndziU6tVyHraN2dPVo4Sor+RB5hzQ10
MoLz08/jKN7qvZGP97nDGs3JNwdscJSmNb3Znip3eOKx8CXLDUfReVhvaW11
HYx/vxjiC8BRGHMj6LyZPYCg47iSfxtHYcYvppp+9IDSKn4mkWQcJXbbXks/
xBMshPp4n+fgKNayHxIWbd2A8V6ajMQLHCVGarvlSvI1qKIaaJe9wVGa2S3D
bBzdwcGFyVK64b/6oq266c6uwPGzwfP1t//m67709s7r61CrFhql8BtHef5u
9W+Cvze4lylmvp/CUa5w088G8HkC96HlMsoqjiKIV3vHP+gJn2NKGz6S8JRE
kmew1jMv8F1x7tFgw1MY9V6ZKt7wBmE7odkmbjxFi/rzsoaeD3R+/U3SFcVT
+BLait+K34Aw5fv7v8riKeqglfFvjy9IFhpLGKniKZaNRW0BJe7Qv5dFtesc
ntL6eMjqkcl1iA1vumB2CU/ZtiGEnCd5gPxsuGuvI54SaPW0rKPKA0YvnQq1
9MZTInNHWW28PEFFtrzQPgFPed/JJPAF7w2zeVfR+H085eXXj3XQ6Q1ZLCKd
Lk/xlBOv1Qtmin1gbfzh1nUMT4m2lbqhF+wLpQ8i9YPn8ZTb50vbZxICoXl3
5BgLjkB5wlaU8bI+CEZjbwXn7iJQFOS6mIroQ+BgYERRnQiBohgfeKu27ybI
LYarmsgSKDdmb2/PWsaAoWv4rzFVAoU4ImiYaxwGUZfC6BgtCZR3Ewokpulw
eNQZmv3QlUDRuBEQ9L3OC2p0QmUl/AmUKu8DW9+f3IJFpZt2BikEyklnRle2
qNvA8ipkYyiPQEmunP3NFxUFouIh97xKCRT3gIO1HEnRYMUdjKU1Eyi80qrZ
N5tjISAl6MKRbgLFKFe8dWktDlJ3Bc1UjxIohG4BVQ2ZBCi7FXhLZ5FAwf2/
aNkKONiPJ/7PY94B5ddYdkyY8dfGc+9Yvt/PV1B+x0YmfiyV6jt2a/V9omm0
4/yaG53ObjtmzfaWLMvfsdg+708qL3esccfLohPtODDEM27l147HLa+PK7OR
/meM92rO56Ad96S7yl2K3fEyq2vr3/QdH8W7bLJW7Dh90NH0wuSOr+XZsY6Y
0PzPCX4ZDxNsd1ys3ypy0n3HM1S50wnRO2bucv0in7pj8Re5ZsN5O3a9yOgh
/27HcSco1KHGHRfRe8fEf99xy0DBXvmhHU+97s8bmtkxw53dx+I3diyYutTM
tUlD+f//Wf8H45dI8Q==
       "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGDQA2IQveHUtUfnKtkc1N8s+fTg5jx7j2/KK82q2BwYoCDj
bITpwzYEv2NJ78HuyQj+iupDvmYLEPznmjpp3TsR/LS2/9NM3yD4cVmzZNsb
OeD8zsAyS+M53HA+i8jUZ/W/+OD866dbP7TwC8L5odVJZrMOC8H5Odyvlc5F
icD58quPTWN7JQrnV+9wDuafLQ7nFyzL2WamLwnn8zCZJ+k9lYLzXXNDpmpN
loHzJXbK5ruqyMH5k4o6Jhpcl4fzg9r8deduU4DztaJbQpfUKsL5155xLpoc
qgTnn0t66igkrwznP2RZ/mOqEoL/ZVnGekk1BF/y9WsZRV0EP6X403d9awT/
V/P/tb7hCL7aUkmpzn4E39L99gWeyQi+z8s57ROmIfiFugpfp89F8PdsVbuw
bDWCH3TMuO3IcQQ/NeOrjcdpBL+Ca/vn0+cQ/Ll+VomXryL4L6452Dx6jOTe
CqbPqc8RfF7pIytfvkLwjeLdxT9+RPBdGTnPlXxF8CMWn2r58QPBz3Ltsa75
g+DXPvf99P8/gg8Au0WkFg==
       "]], 
      LineBox[{{2.7724166115236333`, -0.01807680977430061}, {2.77256655620062,
        0.}, {2.778751225087338, 0.}, {2.7849358939740556`, 0.}, {
       2.791120562860773, 0.}, {2.7973052317474902`, 0.}, {2.797503166117579, 
       0.030128016290501016`}}], 
      LineBox[{{-6.001358203548172, 
       0.030128016290501016`}, {-6.001070212752446, 0.}, {-5.994438078225581, 
       0.}, {-5.987805943698716, 0.}, {-5.987516847777238, 
       0.030128016290501016`}}], 
      LineBox[{{-6.034517642576188, 
       0.030128016290501016`}, {-6.034230885386771, 0.}, {-6.027598750859906, 
       0.}, {-6.0273112731100325`, 0.030128016290501016`}}], 
      LineBox[{{2.759927113401112, 0.030128016290501016`}, {
       2.7601972184271846`, 0.}, {
       2.7603471631041714`, -0.01807680977430061}}]},
     Annotation[#, "Charting`Private`Tag$1729297#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-0.01807680977430061, 0.030128016290501016`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.770588179157421*^9, 3.770588215974764*^9}, {
  3.770588274930691*^9, 3.7705882810207357`*^9}},
 CellLabel->"Out[82]=",ExpressionUUID->"67d1b414-dc39-4dca-8c79-bafb3ee1f178"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"G", "=", "1"}]], "Input",
 CellChangeTimes->{{3.770588181382188*^9, 3.770588182537401*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"6a25eefd-1d6e-426a-ad92-71cb333b247b"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.7705881839521923`*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"339a13ba-cb63-4b08-8eec-174feb0801d1"]
}, Open  ]]
},
WindowSize->{808, 621},
WindowMargins->{{-1254, Automatic}, {-84, Automatic}},
FrontEndVersion->"12.0 for Linux x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 841, 21, 31, "Input",ExpressionUUID->"2e64a3ad-1581-4122-90f9-bc6b05065da3"],
Cell[1424, 45, 859, 24, 57, "Output",ExpressionUUID->"6380167d-3ce9-4f97-ba24-5db6e4ddd1bf"]
}, Open  ]],
Cell[2298, 72, 131, 3, 31, "Input",ExpressionUUID->"9a8a99d3-ecb9-4806-a41a-fa8d51404a1b"],
Cell[2432, 77, 999, 26, 31, "Input",ExpressionUUID->"5b5bceaf-0766-41d7-935a-b1bed99af9be"],
Cell[CellGroupData[{
Cell[3456, 107, 695, 15, 31, "Input",ExpressionUUID->"f83a075f-33f0-4a3b-9b9a-686abd0673fa"],
Cell[4154, 124, 1148, 33, 69, "Output",ExpressionUUID->"3812dd4f-4c63-4800-9fcd-c8769e1d3f07"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5339, 162, 220, 2, 43, "WolframAlphaLong",ExpressionUUID->"7b0419dc-5dd7-4890-a386-8dc3fc657f95"],
Cell[5562, 166, 34018, 724, 528, "Print",ExpressionUUID->"a5d052c5-7bd0-4705-9db0-8d4e8f867dde"]
}, Open  ]],
Cell[CellGroupData[{
Cell[39617, 895, 228, 4, 31, "Input",ExpressionUUID->"99083206-2db7-44a6-9560-d2b1f375a162"],
Cell[39848, 901, 211, 4, 35, "Output",ExpressionUUID->"7e584d3b-bbc9-4012-86d8-2062fc4559f1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40096, 910, 198, 2, 43, "WolframAlphaLong",ExpressionUUID->"41b0f5cd-3963-4bd4-835a-23512092860f"],
Cell[40297, 914, 149883, 3439, 3488, "Print",ExpressionUUID->"8cbb173b-3547-47ed-8008-05e90aa64cf9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[190217, 4358, 384, 9, 31, "Input",ExpressionUUID->"498076c4-dd8b-4206-8b6b-d503ce907234"],
Cell[190604, 4369, 552, 17, 79, "Output",ExpressionUUID->"4d5d8511-f687-43fe-bb5c-fc04c67e1e94"]
}, Open  ]],
Cell[CellGroupData[{
Cell[191193, 4391, 233, 3, 43, "WolframAlphaLong",ExpressionUUID->"49f0d9ab-e45d-4339-b32b-3d0d3bce3245"],
Cell[191429, 4396, 31044, 663, 600, "Print",ExpressionUUID->"840a6ca5-0dcb-48ef-83c4-162834e22bbb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[222510, 5064, 194, 3, 31, "Input",ExpressionUUID->"4962fdef-a0af-44b6-a53c-873f66bab105"],
Cell[222707, 5069, 151, 2, 35, "Output",ExpressionUUID->"7d3429ae-a8d9-45f7-82f4-31da50406a01"]
}, Open  ]],
Cell[222873, 5074, 257, 4, 31, "Input",ExpressionUUID->"22280482-4bd8-4909-be79-0f4d879ae924"],
Cell[CellGroupData[{
Cell[223155, 5082, 1068, 30, 83, "WolframAlphaLong",ExpressionUUID->"ea038ae6-abd5-41fc-8d5e-8f2f407041b0"],
Cell[224226, 5114, 3110, 61, 96, "Print",ExpressionUUID->"2d5c5e1d-faac-4b4f-8788-1cbc812e00a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[227373, 5180, 434, 12, 31, "Input",ExpressionUUID->"9ae127b0-6c40-430b-93a9-61ce12ee50e0"],
Cell[227810, 5194, 1032, 33, 74, "Output",ExpressionUUID->"9c784fd2-b66c-4b14-b170-40eb867038bb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[228879, 5232, 215, 2, 43, "WolframAlphaLong",ExpressionUUID->"17182ecb-7359-42b7-b1a3-a243e0840229"],
Cell[229097, 5236, 9645, 195, 230, "Print",ExpressionUUID->"656ee9b4-b483-4f80-a02c-d46ab9fd305d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[238779, 5436, 202, 2, 43, "WolframAlphaLong",ExpressionUUID->"24a5d59b-6769-4fa8-a4d0-0360446ea063"],
Cell[238984, 5440, 9006, 179, 230, "Print",ExpressionUUID->"dbd2a044-fc08-45db-a9d6-9001fb24c879"]
}, Open  ]],
Cell[CellGroupData[{
Cell[248027, 5624, 866, 22, 55, "Input",ExpressionUUID->"43635dd3-d756-4f8a-8335-cfb666f9a4fa"],
Cell[248896, 5648, 869, 27, 69, "Output",ExpressionUUID->"99a2a520-0275-444b-94a8-341bb8198f87"],
Cell[249768, 5677, 466, 12, 41, "Output",ExpressionUUID->"657ae1f5-34c8-4049-881e-7eb4e4c17a16"]
}, Open  ]],
Cell[CellGroupData[{
Cell[250271, 5694, 435, 12, 43, "Input",ExpressionUUID->"ecf6fe35-296c-493a-934a-e22bab0e01d3"],
Cell[250709, 5708, 434, 12, 37, "Output",ExpressionUUID->"6033e26b-d364-406e-b312-771c3f236313"]
}, Open  ]],
Cell[251158, 5723, 437, 12, 39, "Input",ExpressionUUID->"99c2fa32-a89a-41dc-8016-75b6e45cd290"],
Cell[CellGroupData[{
Cell[251620, 5739, 780, 22, 39, InheritFromParent,ExpressionUUID->"2ae244fd-76ec-4de0-8ae2-8c72fe445f6a"],
Cell[252403, 5763, 1134, 35, 81, "Output",ExpressionUUID->"7730b597-57ab-44aa-9fe4-b83ba25dd6e8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[253574, 5803, 1078, 34, 71, InheritFromParent,ExpressionUUID->"5708bf2c-ba5e-4921-9873-28b1fb3670dc"],
Cell[254655, 5839, 18721, 326, 239, "Output",ExpressionUUID->"eb2aeaba-4887-440e-ba15-00f17892d920"]
}, Open  ]],
Cell[CellGroupData[{
Cell[273413, 6170, 978, 32, 71, "Input",ExpressionUUID->"7a02dd12-8adf-49b1-bb66-01246d7b0911"],
Cell[274394, 6204, 854, 27, 86, "Output",ExpressionUUID->"4fcd9ed5-ba90-45ac-ac1f-8c1676fb8c30"]
}, Open  ]],
Cell[CellGroupData[{
Cell[275285, 6236, 1318, 39, 126, "Input",ExpressionUUID->"21168922-8154-451d-84ba-ea73ef4d641a"],
Cell[276606, 6277, 1147, 36, 94, "Output",ExpressionUUID->"75eb6ac8-bde6-4dbc-9b35-adb95c084793"]
}, Open  ]],
Cell[CellGroupData[{
Cell[277790, 6318, 1144, 36, 90, "Input",ExpressionUUID->"26d75589-4842-4f5e-ba78-b1bb8b3c051a"],
Cell[278937, 6356, 762, 23, 98, "Output",ExpressionUUID->"d48afe7c-de52-448c-892d-20bb8675d1ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[279736, 6384, 1251, 38, 126, "Input",ExpressionUUID->"51e9c2ff-a3cd-4275-a74b-7efc072b9559"],
Cell[280990, 6424, 1657, 53, 127, "Output",ExpressionUUID->"0be7435a-9a71-41f5-9f10-937923880210"]
}, Open  ]],
Cell[CellGroupData[{
Cell[282684, 6482, 604, 14, 43, "WolframAlphaLong",ExpressionUUID->"c1877fbf-79c5-44b6-aa11-f632245c5b7f"],
Cell[283291, 6498, 75457, 1558, 1364, "Print",ExpressionUUID->"e8b05067-e753-4638-b312-857e846e604b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[358785, 8061, 247, 3, 43, "WolframAlphaLong",ExpressionUUID->"7654fe46-c3ff-484e-9622-48705f307e76"],
Cell[359035, 8066, 499338, 9407, 4212, "Print",ExpressionUUID->"95531f01-3e1d-4429-96b6-652b8fb820dd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[858410, 17478, 538, 14, 31, "Input",ExpressionUUID->"dd1c43ab-50e0-4bb9-bf76-fdf8a0799921"],
Cell[858951, 17494, 379, 10, 62, "Output",ExpressionUUID->"e8f51b97-bf07-420c-b11d-95f893e151ff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[859367, 17509, 1268, 37, 99, "Input",ExpressionUUID->"883cba17-2bf6-4281-8eea-880e800439ae"],
Cell[860638, 17548, 12672, 230, 275, "Output",ExpressionUUID->"67d1b414-dc39-4dca-8c79-bafb3ee1f178"]
}, Open  ]],
Cell[CellGroupData[{
Cell[873347, 17783, 194, 3, 31, "Input",ExpressionUUID->"6a25eefd-1d6e-426a-ad92-71cb333b247b"],
Cell[873544, 17788, 151, 2, 35, "Output",ExpressionUUID->"339a13ba-cb63-4b08-8eec-174feb0801d1"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

